#!/usr/bin/perl

use strict;
use warnings;

use XML::LibXML;
use Getopt::Long;
use Carp qw(croak cluck confess);
use Log::Log4perl qw (get_logger);
use Data::Dumper;
use Config::Std;
use File::Spec;
use Slurp;

use UcsSimple::Session;
use UcsSimple::CommMgr;
use UcsSimple::XmlUtil;
use UcsSimple::DomUtil;
use UcsSimple::SchemaParser;

use constant ELEMENT_NODE => 1;
use constant MAX_FAILURES => 10;
use constant SLEEP_TIME => 600;

$SIG{'INT'} = \&sigIntHandler;
my $lSignalCaught = undef;

my $lFailures = 0;
my $lCookie = undef;
my $lCfgFile = undef;

my $lSpInfoMap; 


# Policy references from a service profile
my $SP_POLICY_MAP = {
    "biosProfileName" => "Bios Profile",
    "bootPolicyName" => "Boot Policy",
    "dynamicConPolicyName" => "Dynamic Connection Policy",
    "hostFwPolicyName" => "Host F/W Policy",
    "mgmtFwPolicyName" => "Mgmt F/W Policy",
    "powerPolicyName" => "Power Policy",
    "scrubPolicyName" => "Scrub Policy",
    "statsPolicyName" => "Stats Policy",
    "vconProfileName" => "Vcon Profile",
    "localDiskPolicyName" => "Local Disk Policy",
    "maintPolicyName" => "Maintenance Policy",
    "mgmtAccessPolicyName" => "Mgmt Access Policy",
    "solPolicyName" => "SOL Policy",
    "srcTemplName" => "Source Template"
};

my $VNIC_ETHER_POLICY_MAP = {
    "adaptorProfileName" => "Adapter Profile",
    "nwCtrlPolicyName" => "Network Control Policy",
    "qosPolicyName" => "QOS Policy",
    "statsPolicyName" => "Stats Policy",
};

my $VNIC_FC_POLICY_MAP = {
    "adaptorProfileName" => "Adapter Profile",
    "qosPolicyName" => "QOS Policy",
    "statsPolicyName" => "Stats Policy",
};


# Specify the command line options and process the command line
my $options_okay = GetOptions (
    'cfg=s'    => \$lCfgFile,      # A config file with application settings

    # Standard meta-options
    'usage'			=> sub { usage(); },
    'help'			=> sub { usage(); },
);


usage() if ((!$options_okay) || (!defined($lCfgFile)));

# Load our application specific settings
my $lAppCfg = loadConfig({configFile => $lCfgFile});

# Initialize logging
initLogging($lAppCfg->logCfgFile());

# Load class meta from schema
my $lSchemaParser = UcsSimple::SchemaParser->new({schema => $lAppCfg->schemaFile});
my $lClassMeta = $lSchemaParser->getClassMeta();
$lClassMeta->applyTypicalUcsMods();

# Create directory structure for our report
initReport();

# Create session and communication manager
my $lSession = UcsSimple::Session->new(
    { userName => $lAppCfg->userName(), password => $lAppCfg->password(), uri => $lAppCfg->uri()});

my $lCommMgr = UcsSimple::CommMgr->new(
    { session => $lSession, ssl_opts => {no_verify => 1} });

$lCookie = $lCommMgr->doLogin();
if (!defined($lCookie))
{
    confess "Could not get cookie";
}
 
$lSpInfoMap = {};

# Get logical SP info
$lSpInfoMap = getSpInfo({dns => $lAppCfg->spDns()});

# Get physical SP info
my $lPnDns = getPnDns({ spInfoMap => $lSpInfoMap});
getPhysInfo({ spInfoMap => $lSpInfoMap, dns => $lPnDns});


# TODO: MOVE THE DN RESOLUTION ELSEWHERE
# my $lTestDn = getSpDn({macAddr => "00:25:B5:00:00:88"});


my $lPolicyRefMap = {};

printNavPage({ spInfoMap => $lSpInfoMap });

foreach my $lSpDn (keys %{$lSpInfoMap})
{
    my $lSpInfo = $lSpInfoMap->{$lSpDn};

    # Correlate query information
    correlateInfo({ spInfo => $lSpInfo });

    getRefPolicies({ spInfo => $lSpInfo, classMeta => $lClassMeta });

    printSpInfo({ spInfo => $lSpInfo });

    # TODO: Print network and storage stuff cleanly;
    # TODO: Print hyper-links to configs for various properties;
    # TODO: Print out xml for the templates;
    # TODO: Pump out xml to create the service profile.
    # TODO: Pump out list of orgs
    # TODO: Pump out information on our chassis and network elements;
    # TODO: Operational summary!
    # TODO: Top Level page! 
    # TODO: Template information
    # TODO: INSTALL IT ALL!
    # FIGURE OUT HOW TO GET A LIST OF ALL THE POLICIES REFERENCED BY THE SP AND GET THEIR CFG!


    # Print a summary table for all monitored service profiles.
    # printSummaryInfo({ spInfoMap => $lSpInfoMap });
}

$lCommMgr->doLogout();
exit 0;


sub cleanupAndExit
{
    my ($lMsg) = @_;
    print "Logging out\n";
    $lCommMgr->doLogout();

    get_logger(__PACKAGE__)->warn("Logging out");
    exit  0;
}


sub checkSignal
{
    if ($lSignalCaught)
    {
        cleanupAndExit("Exiting because of signal");
    }
}


sub sigIntHandler
{
    if (!defined($lSignalCaught))
    {
        $lSignalCaught = 1;
    }
    else 
    {
        $lSignalCaught++;
    }

    if ($lSignalCaught > 2)
    {
        print "Multiple signals -exiting \n";
        get_logger(__PACKAGE__)->warn("Multiple signals, exiting");
        exit 1;
    }
    else
    {
        get_logger(__PACKAGE__)->warn(
            "Caught signal - will clean up and exit");

        print "Caught signal - will cleanup and exit \n";
    }
}


sub initLogging
{
    my ($aInLogCfgFile) = @_;

    if (defined($aInLogCfgFile))
    {
        Log::Log4perl::init_and_watch($aInLogCfgFile, 5);
        get_logger(__PACKAGE__)->debug(
            "Log configuration file: $aInLogCfgFile");
    }
    else
    {
        my $lConf = q(
            log4perl.category = DEBUG, Logfile
            log4perl.appender.Logfile          = Log::Log4perl::Appender::File
            log4perl.appender.Logfile.filename = debug.log
            log4perl.appender.Logfile.layout = Log::Log4perl::Layout::PatternLayout
            log4perl.appender.Logfile.layout.ConversionPattern = [%p][%d][%F:%L] %m%n
            log4perl.appender.Logfile.mode     = write
            log4perl.appender.Logfile.main     = DEBUG
        );
        Log::Log4perl::init(\$lConf);
        get_logger(__PACKAGE__)->debug(
            "No log configuration file -using reasonable defaults");
    }
}



# Initialize report structure
sub initReport
{
    # Create report directory 
    if (!(-d $lAppCfg->backupHome()))
    {
        die "Backup home directory does not exist";
    }

    my $lDateTime = UcsSimple::Util::getDate();
    my $lModDateTime = $lDateTime;
    $lModDateTime  =~ s/:/_/g;

    my $lBackupDir = File::Spec->catfile( $lAppCfg->backupHome(), $lModDateTime );
    $lAppCfg->startTime($lDateTime);
    $lAppCfg->backupDir($lBackupDir);
    mkdir $lBackupDir or die "Could not create backup directory ($lBackupDir) $!";

    my $lCfgDir = File::Spec->catfile( $lAppCfg->backupDir(), "cfg");
    $lAppCfg->cfgDir($lCfgDir);
    mkdir $lCfgDir or die "Could not create config directory ($lCfgDir) $!";
}



sub printAppCfg
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'appCfg'}))
    {
        confess "Missing mandator argument: appCfg";
    }
    my $aInAppCfg = $aInRefArgs->{'appCfg'};

    print "\n";
    print "URI           : " . $aInAppCfg->uri()  . "\n";
   
    my $lRows = [];
    foreach my $lDn (@{$aInAppCfg->spDns()})
    {
       push @{$lRows}, [$lDn];
    }

    UcsSimple::Util::printTable(
    {
        rows => $lRows,
        headings => ["Service Profiles"]
    });
    print "\n";

}

 


sub getDocHead
{

    my $lDocHead = <<'END_HEAD';
<!doctype html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>UCS Serivice Profile Backup </title>

       <!-- Include Styles -->
        <link rel="stylesheet" href="assets/themes/smoothness/jquery-ui.css" />		
        <link rel="stylesheet" href="assets/css/mytable.css" />		
        <link rel="stylesheet" href="assets/css/page.css" />		
        <link rel="stylesheet" href="assets/css/styles.css" />		
        <!--[if IE 7]><style type="text/css">#v-nav>ul>li.current{border-right:1px solid #fff!important}#v-nav>div.tab-content{z-index:-1!important;left:0}</style><![endif]-->
        <!--[if IE 8]><style type="text/css">#v-nav>ul>li.current{border-right:1px solid #fff!important}#v-nav>div.tab-content{z-index:-1!important;left:0}</style><![endif]-->
    </head>

    <body>
        <div id="tagline">
	    <div class="row">
                <div id="ciscoLinks">
                    <a href="http://developer.cisco.com" class="cisco" title="Cisco UCS"> Cisco UCS </a>
                </div>
                <h1>
                    <a href="http://developer.cisco.com" target="_blank">Cisco Developer's Network</a> Integrate with UCS
                </h1>
            </div>
            <div style="clear: both;"></div>
        </div>

        <section id="wrapper" class="wrapper">

END_HEAD

    return $lDocHead;
}



sub getTabs
{
    my $lTabs = <<'END_HEAD';
        <h2 class="title">UCS Service Profile Backup </h2>

            <div id="v-nav">

                <ul>
                    <li tab="tab1" class="first current">Overview</li>
                    <li tab="tab2">Summary</li>
                    <li tab="tab3">Identities</li>
                    <li tab="tab4">Network</li>
                    <li tab="tab5">Storage</li>
                    <li tab="tab6">Hardware</li>
                    <li tab="tab7">Firmware</li>
                    <li tab="tab8">Faults</li>
                    <li tab="tab9">Topology</li>
                    <li tab="tab10">Configs</li>
                </ul>

END_HEAD

    return $lTabs;
}



sub getNavTabs
{
    my $lTabs = <<'END_HEAD';
        <h2 class="title">UCS Service Profile Backup </h2>

            <div id="v-nav">

                <ul>
                    <li tab="tab1" class="first current">Service Profiles</li>
                    <li tab="tab2">Summary</li>
                </ul>

END_HEAD

    return $lTabs;
}



sub getDocTail
{

    my $lDocTail = <<'END_TAIL';

         </div>

        </section>

        <script type="text/javascript" src="assets/jquery/1.7.2/jquery.min.js"></script> 
        <script type="text/javascript" src="assets/jquery-ui/1.10.3/jquery-ui.js"></script> 
        <script type="text/javascript" src="assets/jquery-hashchange/jquery.ba-hashchange.js"></script>       
        <script type="text/javascript" src="assets/js/script.js"></script>

    </body>
</html>

END_TAIL

   return $lDocTail

}



# Given a MAC address, determine the service profile's dn
# First try pool - then try hardware default.
sub getSpDn
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'macAddr'}))
    {
        confess "Missing mandator argument: macAddr";
    }
    my $aInMacAddr = $aInRefArgs->{'macAddr'};
    my $lSpDn = undef;

    my $lXmlRequest = qq% <configResolveClass cookie="REPLACE_COOKIE" inHierarchical="false" classId="macpoolAddr"><inFilter><eq class="macpoolAddr" property="id" value="$aInMacAddr" /></inFilter> </configResolveClass>%;

    my ($lSuccess, $lContent, $lErrHashRef) =
        $lCommMgr->doPostXML({postData => $lXmlRequest});

    if ($lSuccess)
    {
        my $lXmlParser = XML::LibXML->new();
        my $lXmlDoc = $lXmlParser->parse_string($lContent);
         
        my @lMacs =  $lXmlDoc->getElementsByTagName('macpoolAddr');
        foreach my $lMac (@lMacs)
        { 
    	    my $lVnicDn = $lMac->getAttribute('assignedToDn');
            if (length($lVnicDn) > 0)
            {
                $lSpDn = UcsSimple::Util::getAncestor($lVnicDn, 1);
            }
        }
    }
    $lSpDn = undef;

    if (!defined($lSpDn))
    {
         my $lXmlRequest = qq% <configResolveClass cookie="REPLACE_COOKIE" classId="vnicEtherIf"><inFilter><eq class="vnicEtherIf" property="addr" value="$aInMacAddr" /></inFilter> </configResolveClass>%;

         my ($lSuccess, $lContent, $lErrHashRef) =
             $lCommMgr->doPostXML({postData => $lXmlRequest});

         if ($lSuccess)
         {
             my $lXmlParser = XML::LibXML->new();
             my $lXmlDoc = $lXmlParser->parse_string($lContent);
         
             my @lEthIfs =  $lXmlDoc->getElementsByTagName('vnicEtherIf');
             foreach my $lEthIf (@lEthIfs)
             {
    	         my $lVnicDn = $lEthIf->getAttribute('dn');
                 if (length($lVnicDn) > 0)
                 {
                     $lSpDn = UcsSimple::Util::getAncestor($lVnicDn, 2);
                 }
            }
        }
    }
    return $lSpDn
}


sub printNavPage
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    my $lIdxFileName = File::Spec->catfile( $lAppCfg->backupDir(), 'index.html');
    open my $lFh, '>', $lIdxFileName or die "Cannot open file $lIdxFileName $!";

    my $lHead = getDocHead();
    print $lFh $lHead;

    my $lTabs = getNavTabs();
    print $lFh $lTabs;

    printSpNavList({ spInfoMap => $aInSpInfoMap, fhandle => $lFh });

    my $lTail = getDocTail();
    print $lFh $lTail; 

}



sub printSpNavList
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = []; 
    my $lHeadings  = [ "Service Profile" ];
    foreach my $lSpDn (keys %{$aInSpInfoMap})
    {
        my $lSpInfo = $aInSpInfoMap->{$lSpDn};
        my $lSpFileName = $lSpInfo->filename() . '.html';
        my @lRow;
        my $lSpLink .= qq%<a href="$lSpFileName"> $lSpDn </a>%;
        push @lRow, $lSpLink;
        push @{$lRows}, \@lRow;
    }

    my $lSpTable = getHtmlTable({
        rows => $lRows,
        headings => $lHeadings,
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lSpTable;
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printSpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    my $lFileName = File::Spec->catfile( $lAppCfg->backupDir(), ($aInSpInfo->filename() . '.html') );
    open my $lFh, '>', $lFileName or die "Cannot open file $lFileName $!";

    my $lHead = getDocHead();
    print $lFh $lHead;

    my $lTabs = getTabs();
    print $lFh $lTabs;

    # 
    # GEN INFO
    # 
    printOverviewInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # SP SUMMARY
    # 
    printSpSummaryInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # IDENTITY
    # 
    printIdentityInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # NETWORK INFORMATION
    #
    printNetworkInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # STORAGE INFORMATION
    #
    printStorageInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # H/W INFORMATION
    #
    printHardwareInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # F/W INFORMATION
    #
    printFirmwareInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # FAULT INFORMATION
    #
    printFaultInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # TOPOLOCY INFORMATION
    #
    printTopologyInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # POLICY CONFIG INFORMATION
    #
    printConfigInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    my $lTail = getDocTail();
    print $lFh $lTail; 
}



# Print out a table that summarizes candidacy and fail-over status
# for each of our service profiles
#
sub printSummaryInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lHeadings  = [ "Service Profile", "Physical Node", "Summary", "Failed", "F/O", "Faults", "Pool" ];
    my $lRows = []; 
    foreach my $lSpDn (keys %{$aInSpInfoMap})
    {
        my $lSpInfo = $aInSpInfoMap->{$lSpDn};
        my @lRow;
        push @lRow, $lSpInfo->dn();
        push @lRow, $lSpInfo->pnDn();
        push @lRow, $lSpInfo->faultCount();
        push @lRow, $lSpInfo->poolDn();
        push @{$lRows}, \@lRow;
    }

    my $lSummaryTable = getHtmlTable({
        rows => $lRows,
        headings => $lHeadings,
    });
}



sub getSpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dns'}))
    {
        confess "Missing mandator argument: dns";
    }
    my $aInDns = $aInRefArgs->{'dns'};

    my $lSpInfoMap = {};

    # Do a resolve dns query to get the sp info
    #print "Querying service profile information\n";
    get_logger(__PACKAGE__)->debug("Querying service profile information");
    my ($lSuccess, $lXmlResp, $lErrHashRef) =
        $lCommMgr->resolveDns({ dns => $aInDns, hier => 1 });

    if ($lSuccess)
    {
        my $lXmlParser = XML::LibXML->new();
        my $lXmlDoc = $lXmlParser->parse_string($lXmlResp);
        UcsSimple::DomUtil::populateDn($lXmlDoc, 1);
        my $lPnDns = [];
        my $lFoundSpDns = {};

        #print "Grab by tag\n";

        my @lsServers =  $lXmlDoc->getElementsByTagName('lsServer');
        foreach my $lsServer (@lsServers)
        {
            my $lDn = $lsServer->getAttribute('dn');
            $lFoundSpDns->{$lDn} = 1;
            # print "Current SP: $lDn\n";

            # Organize results by class name (for printing out)
            my $lSpClassElMap = UcsSimple::DomUtil::getElementsByClass($lsServer);

            my $lPnDn = $lsServer->getAttribute('pnDn');
            if (length($lPnDn) <  1)
            {
                $lPnDn = undef;
            }

            my $lSpInfo = SpInfo->new({
                'dn' => $lsServer->getAttribute('dn'),
                'pnDn' => $lPnDn,
                'assignState' => $lsServer->getAttribute('assignState'),
                'assocState' => $lsServer->getAttribute('assocState'),
                'type' => $lsServer->getAttribute('type'),
                'srcTemplName' => $lsServer->getAttribute('srcTemplName'),
                'spClassElements' => $lSpClassElMap,
                'foundSp' => 1,
            });

            # Pool information from lsReq
            my @lsReqs =  $lsServer->getElementsByTagName('lsRequirement');
            foreach my $lsReq (@lsReqs)          
            { 
                my $lPoolDn = $lsReq->getAttribute('pnPoolDn');
                my $lPoolName = $lsReq->getAttribute('name');
                if ((length $lPoolDn) > 0)
                {
                    $lSpInfo->poolName($lPoolName);
                    $lSpInfo->pooled(1);
                    $lSpInfo->poolDn($lPoolDn);
                }
            }

            $lSpInfo->spClassElements($lSpClassElMap);
            $lSpInfoMap->{$lDn} = $lSpInfo;
        }

        # Add a dummy record for SPs that were not found.
        foreach my $lSpDn (@{$aInDns})
        {
            if (!(exists $lFoundSpDns->{$lSpDn}))
            {
                my $lSpInfo = SpInfo->new({
                    'dn' => $lSpDn,
                }); 
                $lSpInfoMap->{$lSpDn} = $lSpInfo;
            }
        }

    }

    return $lSpInfoMap;
}



# Just simple method to get all the pnDns that are defined  
sub getPnDns
{ 
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    my $lPnDns = [];
    foreach my $lSpDn (keys %{$aInSpInfoMap})
    {
        my $lSpInfo = $aInSpInfoMap->{$lSpDn};
        my $lPnDn = $lSpInfo->pnDn();
        if (defined($lPnDn))
        { 
            push @{$lPnDns}, $lPnDn;
        }
    }
    return $lPnDns;
}



sub getPhysInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'dns'}))
    {
        confess "Missing mandator argument: dns";
    }
    my $aInDns = $aInRefArgs->{'dns'};

    if (@{$aInDns} > 0) 
    {
        # print "Querying for physical information\n";
        get_logger(__PACKAGE__)->debug("Querying physical information");

        my ($lSuccess, $lXmlResp, $lErrHashRef) =
            $lCommMgr->resolveDns({ dns => $aInDns, hier => 1 });

        if ($lSuccess)
        {
            my $lXmlParser = XML::LibXML->new();
            my $lXmlDoc = $lXmlParser->parse_string($lXmlResp);
            UcsSimple::DomUtil::populateDn($lXmlDoc, 1);

            my @lBlades =  $lXmlDoc->getElementsByTagName('computeBlade');
            foreach my $lBlade (@lBlades)
            {
                my $lDn = $lBlade->getAttribute('dn');
                # Organize results by class name (for printing out)
                my $lPhysClassElMap = UcsSimple::DomUtil::getElementsByClass($lBlade);
                my $lSpDn = $lBlade->getAttribute('assignedToDn');
                if (exists $aInSpInfoMap->{$lSpDn})
                {
                    my $lSpInfo = $aInSpInfoMap->{$lSpDn};
                    $lSpInfo->physClassElements($lPhysClassElMap);
                    $lSpInfo->physClass("computeBlade");
                    $lSpInfo->foundPhys(1);
                }
            }
            my @lRackUnits =  $lXmlDoc->getElementsByTagName('computeRackUnit');
            foreach my $lRackUnit (@lRackUnits)
            {
                my $lDn = $lRackUnit->getAttribute('dn');
                print "Current rack unit: $lDn\n";
                # Organize results by class name (for printing out)
                my $lPhysClassElMap = UcsSimple::DomUtil::getElementsByClass($lRackUnit);
                my $lSpDn = $lRackUnit->getAttribute('assignedToDn');
                if (exists $aInSpInfoMap->{$lSpDn})
                {
                    my $lSpInfo = $aInSpInfoMap->{$lSpDn};
                    $lSpInfo->physClassElements($lPhysClassElMap);
                    $lSpInfo->physClass("computeRackUnit");
                    $lSpInfo->foundPhys(1);
                }
            }
        }
        else
        {
            print "Failed to get physical h/w inventory\n";
            get_logger(__PACKAGE__)->debug("Failed to get physical h/w inventory");
        }
    }
    else
    {
        # print "No physical h/w to query \n";
        get_logger(__PACKAGE__)->debug("No physical h/w to query");
    }
}



sub correlateInfo 
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    my $lSpDn = $aInSpInfo->dn();

    if ($aInSpInfo->foundSp())
    {
        if ($aInSpInfo->type() =~ /instance/)
        {
            $aInSpInfo->isInstance(1);
        }
    }


    if ($aInSpInfo->foundSp() && $aInSpInfo->isInstance())
    {
        my $lElements = $aInSpInfo->getElementsOfClass('lsServer');
        my $lElement = $lElements->[0];

        # 
        # Determine all the references to policies in the SP 
        # 
        my $lPolicyRefMap = $aInSpInfo->policyRefs();
        if (!exists($lPolicyRefMap->{$lSpDn}))
        {
            $lPolicyRefMap->{$lSpDn} = {};
        }
        foreach my $lAdminName (keys %{$SP_POLICY_MAP})
        {
            my $lOperName = 'oper' . (ucfirst $lAdminName);
            my $lOperPolicyDn = $lElement->getAttribute($lOperName);
            $lPolicyRefMap->{$lSpDn}->{$lAdminName} = $lOperPolicyDn;
        }
        


        # 
        # Determine all the references to policies in the vnics
        # 
        $lElements = $aInSpInfo->getElementsOfClass('vnicEther');
        foreach my $lElement (@{$lElements})
        {
            my $lDn = $lElement->getAttribute("dn");
            if (!exists($lPolicyRefMap->{$lDn}))
            {
                $lPolicyRefMap->{$lDn} = {};
            }
            foreach my $lAdminName (keys %{$VNIC_ETHER_POLICY_MAP})
            {
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperPolicyDn = $lElement->getAttribute($lOperName);
                $lPolicyRefMap->{$lDn}->{$lAdminName} = $lOperPolicyDn;
            }
        }


        # 
        # Determine all the references to policies in the vhbas
        # 
        $lElements = $aInSpInfo->getElementsOfClass('vnicFc');
        foreach my $lElement (@{$lElements})
        {
             my $lDn = $lElement->getAttribute("dn");
            if (!exists($lPolicyRefMap->{$lDn}))
            {
                $lPolicyRefMap->{$lDn} = {};
            }
            foreach my $lAdminName (keys %{$VNIC_FC_POLICY_MAP})
            {
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperPolicyDn = $lElement->getAttribute($lOperName);
                $lPolicyRefMap->{$lDn}->{$lAdminName} = $lOperPolicyDn;
            }
       }
    }
}



sub getRefPolicies
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'classMeta'}))
    {
        confess "Missing mandator argument: classMeta";
    }
    my $aInClassMeta = $aInRefArgs->{'classMeta'};

    my $lSpDn = $aInSpInfo->dn();
    if ($aInSpInfo->foundSp() && $aInSpInfo->isInstance())
    {
        # 
        # Determine all the references to policies in the SP 
        # 
        my $lPolicyRefMap = $aInSpInfo->policyRefs();
        my $lPolicyDnMap = {};
        foreach my $lDn (keys %{$lPolicyRefMap})
        {
            foreach my $lPolicyName (keys %{$lPolicyRefMap->{$lDn}})
            {
                my $lPolicyDn = $lPolicyRefMap->{$lDn}->{$lPolicyName};
                if (defined($lPolicyDn)  && (length $lPolicyDn > 0))
                {
                    $lPolicyDnMap->{$lPolicyDn} = 1;
                }
            }
        }

        if ((keys %{$lPolicyDnMap}) > 0)
        {
            my $lDns = keys %{$lPolicyDnMap};
            my ($lSuccess, $lXmlResp, $lErrHashRef) =
            $lCommMgr->resolveDns({ dns => [ keys %{$lPolicyDnMap} ], hier => 1 });

            if ($lSuccess)
            {
                my $lXmlParser = XML::LibXML->new();
                my $lXmlDoc = $lXmlParser->parse_string($lXmlResp);
                UcsSimple::DomUtil::populateDn($lXmlDoc, 1);
                my $lDnElementMap = UcsSimple::DomUtil::getElementByDn($lXmlDoc);

                my $lPolicyFileMap = {};
                foreach my $lDn (keys %{$lPolicyDnMap})
                {
                    if (exists $lDnElementMap->{$lDn})
                    {
                        my $lPolicyElement = $lDnElementMap->{$lDn};
                        my $lCfgDoc = UcsSimple::DomUtil::getConfigConfMo({doc=>$lPolicyElement, classMeta=>$aInClassMeta});
                  
                        #
                        # Create file with configConfMo for the policy 
                        #
                        my $lFilename = $lDn;
                        $lFilename  =~ s/[^A-Za-z0-9\-\.]/_/g;
                        $lFilename  .= '.xml';
                        my $lCfgFile = File::Spec->catfile($lAppCfg->cfgDir(), $lFilename);
                        open my $lFh, '>', $lCfgFile or die "Cannot open file $lCfgFile $!";

                        my $lCfgXml = $lCfgDoc->toString(2); 
                        print $lFh $lCfgXml;
                        close $lFh;

                        $lPolicyFileMap->{$lDn} = $lCfgFile;
                    }
                }
                $aInSpInfo->policyCfgFiles($lPolicyFileMap);
            }
        }
    }
}



sub printConfigInfo
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }


    # Policy configs 
    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n";
    print $aInFh "<h4>Policies</h4>";
    print $aInFh "\n";

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    my $lPolicyFileMap = $aInSpInfo->policyCfgFiles();
    foreach my $lDn (keys %{$lPolicyFileMap})
    {
        my $lCfgXml = slurp $lPolicyFileMap->{$lDn};

        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        my $lCfgHtml = UcsSimple::Util::xmlToHtml($lCfgXml);
        print $aInFh "\n\n";
        # print $aInFh q% <a id="$lDn"> %;
        # print $aInFh '<H4>' . $lDn . '</H4>';
        # print $aInFh qq%</a>%;
        # print $aInFh "\n\n";

        print $aInFh '<pre>';
        print $aInFh '<code>';
        print $aInFh "\n";
        print $aInFh $lCfgHtml;
        print $aInFh "\n";
        print $aInFh '</code>';
        print $aInFh '</pre>';
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



# 
# SP Summary  
#
sub printSpSummaryInfo
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    # 
    # SERVER SUMMARY INFORMATION
    #
    my $lRows = [];

    if ($aInSpInfo->foundSp())
    {
        my $lElements = $aInSpInfo->getElementsOfClass('lsServer');
        my $lElement = $lElements->[0];

        my $lRow = [];
        push @{$lRow}, "DN";
        push @{$lRow}, $aInSpInfo->dn();
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Type";
        push @{$lRow}, $aInSpInfo->type();
        push @{$lRows}, $lRow; 

        # Template information from SP
        # Template information from VNIC
        my $lTempl = $aInSpInfo->srcTemplName();
        if (!(defined($lTempl) && (length $lTempl > 0)))
        {
            $lTempl = "none";
        }
        $lRow = [];
        push @{$lRow}, "Template";
        push @{$lRow}, $lTempl;
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Assignment State";
        push @{$lRow}, $aInSpInfo->assignState();
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Association State";
        push @{$lRow}, $aInSpInfo->assocState();
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Physical Node ";
        push @{$lRow}, $aInSpInfo->pnDn();
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "User Label";
        push @{$lRow}, $lElement->getAttribute("usrLbl");
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Description";
        push @{$lRow}, $lElement->getAttribute("descr");
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Config";
        push @{$lRow}, $lElement->getAttribute("configQualifier");
        push @{$lRows}, $lRow; 

        my $lSpSummaryTable = getHtmlTable(
        {
            rows => $lRows,
        });


        my $lRows = [];
        foreach my $lAdminName (keys %{$SP_POLICY_MAP})
        {
            my $lRow = [];
            push @{$lRow}, $SP_POLICY_MAP->{$lAdminName};
            push @{$lRow}, $lElement->getAttribute($lAdminName);
            my $lOperName = 'oper' . (ucfirst $lAdminName);
            push @{$lRow}, $lElement->getAttribute($lOperName);
            push @{$lRows}, $lRow;
        }

        my $lSpPolicyTable = getHtmlTable({
            rows => $lRows,
            headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
        });

        print $aInFh "\n\n";
        print $aInFh qq%<div class="tab-content">%;
        print $aInFh "\n\n";

        print $aInFh qq%<h4>Summary </h4>%;
        print $aInFh "\n";
        print $aInFh $lSpSummaryTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";

        print $aInFh qq%<H4> Policies</H4>%;
        print $aInFh "\n";
        print $aInFh $lSpPolicyTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";

        print $aInFh qq%</div>%;
        print $aInFh "\n\n";
    }
    else
    { 
        print $aInFh "\n\n";
        print $aInFh qq%<div class="tab-content">%;
        print $aInFh "\n\n";
        print $aInFh "\n\n";

        print $aInFh "<p>";
        print $aInFh "<b>Service profile " . $aInSpInfo->dn() . " not found.</b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";

        print $aInFh qq%</div>%;
        print $aInFh "\n\n";
    }

}



# 
# 
#
sub printNetworkInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lVnicTables = {};
    my $lVnicPolicyTables = {};
    my $lIfTables = {};
    my $lElements = $aInSpInfo->getElementsOfClass('vnicEther');
    foreach my $lElement (@{$lElements})
    {
        my $lRows = [];
        my $lDn = $lElement->getAttribute('dn');

        my $lRow = [];
        push @{$lRow}, "DN";
        push @{$lRow}, $lDn;
        push @{$lRows}, $lRow; 

        # Template information from VNIC
        my $lTempl = $lElement->getAttribute("srcTemplName");
        if (!(defined($lTempl) && (length $lTempl > 0)))
        {
            $lTempl = "none";
        }

        $lRow = [];
        push @{$lRow}, "Template";
        push @{$lRow}, $lTempl;
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Name";
        push @{$lRow}, $lElement->getAttribute('name');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "MAC Address";
        push @{$lRow}, $lElement->getAttribute('addr');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Fabric Id";
        push @{$lRow}, $lElement->getAttribute('switchId');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Owner";
        push @{$lRow}, $lElement->getAttribute('owner');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Type";
        push @{$lRow}, $lElement->getAttribute('type');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Equipment";
        push @{$lRow}, $lElement->getAttribute('equipmentDn');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Boot Device";
        push @{$lRow}, $lElement->getAttribute('bootDev');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "MTU";
        push @{$lRow}, $lElement->getAttribute('mtu');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Virutalization Preference";
        push @{$lRow}, $lElement->getAttribute('virtualizationPreference');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Oper Speed";
        push @{$lRow}, $lElement->getAttribute('operSpeed');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "State";
        push @{$lRow}, $lElement->getAttribute('configState');
        push @{$lRows}, $lRow; 

        my $lVnicTable = getHtmlTable({
            rows => $lRows,
        });

        $lVnicTables->{$lDn} = $lVnicTable;

        $lRows = [];
        foreach my $lAdminName (keys %{$VNIC_ETHER_POLICY_MAP})
        {
            my $lRow = [];
            push @{$lRow}, $VNIC_ETHER_POLICY_MAP->{$lAdminName};
            push @{$lRow}, $lElement->getAttribute($lAdminName);
            my $lOperName = 'oper' . (ucfirst $lAdminName);
            push @{$lRow}, $lElement->getAttribute($lOperName);
            push @{$lRows}, $lRow;
        }

        my $lVnicPolicyTable = getHtmlTable({
            rows => $lRows,
            headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
        });

        $lVnicPolicyTables->{$lDn} =  $lVnicPolicyTable;

        my @lIfs =  $lElement->getElementsByTagName('vnicEtherIf');
        $lRows = [];
        foreach my $lIf (@lIfs)
        {
            my $lRow = [];
            push @{$lRow}, $lIf->getAttribute("dn");
            push @{$lRow}, $lIf->getAttribute("switchId");
            push @{$lRow}, $lIf->getAttribute("operVnetName");
            push @{$lRow}, $lIf->getAttribute("vnet");
            push @{$lRow}, $lIf->getAttribute("defaultNet");
            push @{$lRow}, $lIf->getAttribute("addr");
            push @{$lRows}, $lRow;
        }

        my $lIfTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "Default Network", "MAC Address" ],
        });
        $lIfTables->{$lDn} = $lIfTable;
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Ethernet vNICS</H4>%;

    print $aInFh "<p>\n";
    print $aInFh "Click on vNIC's dn to view details.\n";
    print $aInFh "</p>\n\n";

    print $aInFh "\n";
    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    foreach my $lDn (keys %{$lVnicTables})
    {
        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicPolicyTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lIfTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




sub printStorageInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lVnicTables = {};
    my $lVnicPolicyTables = {};
    my $lIfTables = {};
    my $lElements = $aInSpInfo->getElementsOfClass('vnicFc');
    foreach my $lElement (@{$lElements})
    {
        my $lRows = [];
        my $lDn = $lElement->getAttribute('dn');

        my $lRow = [];
        push @{$lRow}, "DN";
        push @{$lRow}, $lDn;
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Name";
        push @{$lRow}, $lElement->getAttribute('name');
        push @{$lRows}, $lRow; 

        # Template information from VNIC
        my $lTempl = $lElement->getAttribute("srcTemplName");
        if (!(defined($lTempl) && (length $lTempl > 0)))
        {
            $lTempl = "none";
        }
        $lRow = [];
        push @{$lRow}, "Template";
        push @{$lRow}, $lTempl;
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "WWN Address";
        push @{$lRow}, $lElement->getAttribute('addr');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Fabric Id";
        push @{$lRow}, $lElement->getAttribute('switchId');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Owner";
        push @{$lRow}, $lElement->getAttribute('owner');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Type";
        push @{$lRow}, $lElement->getAttribute('type');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Equipment";
        push @{$lRow}, $lElement->getAttribute('equipmentDn');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Boot Device";
        push @{$lRow}, $lElement->getAttribute('bootDev');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "Oper Speed";
        push @{$lRow}, $lElement->getAttribute('operSpeed');
        push @{$lRows}, $lRow; 

        $lRow = [];
        push @{$lRow}, "State";
        push @{$lRow}, $lElement->getAttribute('configState');
        push @{$lRows}, $lRow; 

        my $lVnicTable = getHtmlTable({
            rows => $lRows,
        });

        $lVnicTables->{$lDn} = $lVnicTable;

        $lRows = [];
        foreach my $lAdminName (keys %{$VNIC_FC_POLICY_MAP})
        {
            my $lRow = [];
            push @{$lRow}, $VNIC_FC_POLICY_MAP->{$lAdminName};
            push @{$lRow}, $lElement->getAttribute($lAdminName);
            my $lOperName = 'oper' . (ucfirst $lAdminName);
            push @{$lRow}, $lElement->getAttribute($lOperName);
            push @{$lRows}, $lRow;
        }

        my $lVnicPolicyTable = getHtmlTable({
            rows => $lRows,
            headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
        });

        $lVnicPolicyTables->{$lDn} =  $lVnicPolicyTable;

        my @lIfs =  $lElement->getElementsByTagName('vnicFcIf');
        $lRows = [];
        foreach my $lIf (@lIfs)
        {
            my $lRow = [];
            push @{$lRow}, $lIf->getAttribute("dn");
            push @{$lRow}, $lIf->getAttribute("switchId");
            push @{$lRow}, $lIf->getAttribute("operVnetName");
            push @{$lRow}, $lIf->getAttribute("vnet");
            push @{$lRow}, $lIf->getAttribute("initiator");
            push @{$lRows}, $lRow;
        }

        my $lIfTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "Initiator" ],
        });
        $lIfTables->{$lDn} = $lIfTable;
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Fiber Channel vNICs </H4>%;
    print $aInFh "\n";
    print $aInFh "<p>\n";
    print $aInFh "Click on vNIC's dn to view details.\n";
    print $aInFh "</p>\n\n";

    print $aInFh "\n\n";
    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    foreach my $lDn (keys %{$lVnicTables})
    {
        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicPolicyTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lIfTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



# 
# 
#
sub printStorageInfoXXX
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lElements = $aInSpInfo->getElementsOfClass('vnicFcNode');
    my $lRows = [];
    foreach my $lElement (@{$lElements})
    {
        my $lRow = [];
        push @{$lRow}, $lElement->getAttribute("dn");
        push @{$lRow}, $lElement->getAttribute("identPoolName");
        push @{$lRow}, $lElement->getAttribute("operIdentPoolName");
        push @{$lRow}, $lElement->getAttribute("addr");
        push @{$lRows}, $lRow;
    }

    my $lFcNodeTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN", "Identity Pool", "Oper Identity Pool", "WW Node Address" ],
    });


    $lElements = $aInSpInfo->getElementsOfClass('vnicFc');
    $lRows = [];
    foreach my $lElement (@{$lElements})
    {
        my $lRow = [];
        push @{$lRow}, $lElement->getAttribute("dn");
        push @{$lRow}, $lElement->getAttribute("switchId");
        push @{$lRow}, $lElement->getAttribute("operOrder");
        push @{$lRow}, $lElement->getAttribute("identPoolName");
        push @{$lRow}, $lElement->getAttribute("operIdentPoolName");
        push @{$lRow}, $lElement->getAttribute("addr");
        push @{$lRows}, $lRow;
    }

    my $lFcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN", "Switch", "Oper Order", "Identity Pool", "Oper Identity Pool", "WW Port Address" ],
    });


    $lElements = $aInSpInfo->getElementsOfClass('vnicFcIf');
    $lRows = [];
    foreach my $lElement (@{$lElements})
    {
        my $lRow = [];
        push @{$lRow}, $lElement->getAttribute("dn");
        push @{$lRow}, $lElement->getAttribute("switchId");
        push @{$lRow}, $lElement->getAttribute("operVnetName");
        push @{$lRow}, $lElement->getAttribute("vnet");
        push @{$lRow}, $lElement->getAttribute("initiator");
        push @{$lRows}, $lRow;
    }

    my $lFcIfTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "WW Port Address" ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> vHBAs </H4>%;
    print $aInFh "\n";
    print $aInFh $lFcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Fiber Channel Interfaces</H4>%;
    print $aInFh "\n";
    print $aInFh $lFcIfTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



# 
# 
#
sub printFirmwareInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lElements = $aInSpInfo->getElementsOfClass('firmwareRunning');

    my $lRows = [];
    foreach my $lElement (@{$lElements})
    {
        my $lRow = [];
        push @{$lRow}, $lElement->getAttribute("dn");
        push @{$lRow}, $lElement->getAttribute("deployment");
        push @{$lRow}, $lElement->getAttribute("type");
        push @{$lRow}, $lElement->getAttribute("packageVersion");
        push @{$lRow}, $lElement->getAttribute("version");
        push @{$lRows}, $lRow;
    }

    my $lFwTable = getHtmlTable({
        rows => $lRows,
        headings => [ qw / DN Deployment Type Package Version / ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Firmware </H4>%;
    print $aInFh "\n";
    print $aInFh $lFwTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



# 
# 
#
sub printIdentityInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];

    if ($aInSpInfo->foundPhys())
    {

        #
        # UUID  
        #
    	my $lPhysClass = $aInSpInfo->physClass();
        my $lElements = $aInSpInfo->getElementsOfClass($lPhysClass);
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, "UUID";
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("uuid");
            push @{$lRows}, $lRow;
        }
    }

    {
        my $lElements = $aInSpInfo->getElementsOfClass('vnicEtherIf');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, "MAC Address";
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }
    }

    {
        my $lElements = $aInSpInfo->getElementsOfClass('vnicFcNode');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, "World Wide Node Name";
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }
    }

    {
        my $lElements = $aInSpInfo->getElementsOfClass('vnicIP4VPooledAddr');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, "Management IP";
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }
    }

    {
        my $lElements = $aInSpInfo->getElementsOfClass('vnicIpV4StaticAddr');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, "Management IP";
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }
    }

    my $lIdSummaryTable = getHtmlTable({
        rows => $lRows,
        headings => [ qw / DN Type Address / ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Identities </H4>%;
    print $aInFh "\n";
    print $aInFh $lIdSummaryTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



# 
# 
#
sub printHardwareInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};


    my $lComputeBoardTable = "";
    my $lProcessorUnitTable = "";
    my $lMemoryUnitTable = "";
    my $lAdaptorUnitTable = "";
    my $lPhysTable = "";
    if ($aInSpInfo->foundPhys())
    {
        #
        # COMPUTE PHYSICAL
        #
        my $lRows = [];
    	my $lPhysClass = $aInSpInfo->physClass();
        my $lElements = $aInSpInfo->getElementsOfClass($lPhysClass);
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operPower");
            push @{$lRows}, $lRow;
        }

        my $lPhysTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision OperState  OperPower/ ],
        });


        #
        # COMPUTE BOARDS
        #
        $lRows = [];
        $lElements = $aInSpInfo->getElementsOfClass('computeBoard');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("thermal");
            push @{$lRow}, $lElement->getAttribute("voltage");
            push @{$lRows}, $lRow;
        }

        my $lComputeBoardTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Thermal  Voltage/ ],
        });


        #
        # ADAPTER UNITS
        #
        $lRows = [];
        $lElements = $aInSpInfo->getElementsOfClass('adaptorUnit');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("partNumber");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("connPath");
            push @{$lRow}, $lElement->getAttribute("connStatus");
            push @{$lRows}, $lRow;
        }


        my $lAdaptorUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Part Presence ConnPath ConnStatus / ],
        });

        #
        # MEMORY UNITS
        #
        $lRows = [];
        $lElements = $aInSpInfo->getElementsOfClass('memoryUnit');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("location");
            push @{$lRow}, $lElement->getAttribute("capacity");
            push @{$lRow}, $lElement->getAttribute("clock");
            push @{$lRows}, $lRow;
        }

        $lMemoryUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Presence Location Capacity Clock / ],
        });


        #
        # PROCESSOR UNITS
        #
        $lRows = [];
        $lElements = $aInSpInfo->getElementsOfClass('processorUnit');
        foreach my $lElement (@{$lElements})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("cores");
            push @{$lRow}, $lElement->getAttribute("speed");
            push @{$lRow}, $lElement->getAttribute("stepping");
            push @{$lRow}, $lElement->getAttribute("socketDesignation");
            push @{$lRow}, $lElement->getAttribute("coresEnabled");
            push @{$lRows}, $lRow;
        }

        $lProcessorUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Presence", "Cores", "Speed", "Stepping", "Socket Designation", "Cores Enabled" ],
        });

    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Compute </H4>%;
    print $aInFh "\n";
    print $aInFh $lPhysTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Compute Boards </H4>%;
    print $aInFh "\n";
    print $aInFh $lComputeBoardTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Processor Units </H4>%;
    print $aInFh "\n";
    print $aInFh $lProcessorUnitTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Memory Units </H4>%;
    print $aInFh "\n";
    print $aInFh $lMemoryUnitTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Adaptor Units </H4>%;
    print $aInFh "\n";
    print $aInFh $lAdaptorUnitTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printOverviewInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lElements = $aInSpInfo->getElementsOfClass('lsServer');
    my $lElement = $lElements->[0];

    # TODO: MAKE THIS MY SUMMARY INFORMATION ON THE APPLICATION'S PROGRESS

    my $lRows = [];

    my $lReportTime = $lAppCfg->startTime(); 
    my $lRow = [];
    push @{$lRow}, "Report time";
    push @{$lRow}, $lReportTime;
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "DN";
    push @{$lRow}, $aInSpInfo->dn();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Type";
    push @{$lRow}, $aInSpInfo->type();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Found Service Profile";
    push @{$lRow}, ($aInSpInfo->foundSp() ? "yes" : "no");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Found Physical Node";
    push @{$lRow}, ($aInSpInfo->foundPhys() ? "yes" : "no");
    push @{$lRows}, $lRow; 

    my $lSummaryTable = getHtmlTable(
    {
        rows => $lRows,
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Overview </H4>%;
    print $aInFh "\n\n";
    print $aInFh $lSummaryTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    if (!$aInSpInfo->foundSp())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>Could not find service profile : " . $aInSpInfo->dn() .  "</b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }
    elsif (!$aInSpInfo->isInstance())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>Service profile : " . $aInSpInfo->dn() .  " is not an instance. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }
    elsif (!$aInSpInfo->foundPhys())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No physical hardware found for service profile : " . $aInSpInfo->dn() . "</b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printFaultInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lAllFaults = [];
    foreach my $lFault (@{$aInSpInfo->faults()})
    {
        my $lRow = [];
        my $lCode = $lFault->getAttribute("code");
        push @{$lRow}, $lFault->getAttribute("dn");
        push @{$lRow}, $lCode;
        push @{$lRow}, $lFault->getAttribute("rule");
        push @{$lRow}, $lFault->getAttribute("severity");
        push @{$lRow}, $lFault->getAttribute("id");
        push @{$lRow}, $lFault->getAttribute("lastTransition");
        push @{$lRow}, $lFault->getAttribute("descr");
        push @{$lAllFaults}, $lRow;
    }

    my $lFaultSummaryTable = getHtmlTable({
        rows => $lAllFaults,
        headings => [ qw / DN Code Rule Severity ID LastTransition Description / ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Faults </H4>%;
    print $aInFh "\n\n";
    print $aInFh $lFaultSummaryTable;
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



sub printTopologyInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Topology </H4>%;
    print $aInFh "\n\n";
    print $aInFh "We could print a topology diagram here\n\n";
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




# Print a table
# rows - ref to array of maps.  One map for each row with property name as key.
# headings - (parallel) reference to array property headings.
# fieldWidths - (optional) ref to a map indexed by property name with values the width of the field.
sub getHtmlTable
{
    my ($aInRefArgs) = @_;

    my $lTable = '<table id="poltable" cellspacing="0">' . "\n";

    if (!exists($aInRefArgs->{'rows'}))
    {
        confess "Missing mandator argument: rows";
    }
    my $aInRows = $aInRefArgs->{'rows'};

    my $aInHeadings = undef;
    if (exists($aInRefArgs->{'headings'}))
    {
        $aInHeadings = $aInRefArgs->{'headings'};
    }

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    if (defined($aInHeadings))
    {
        $lTable .= UcsSimple::Util::getIndent($aInIndent) . '<tr>';
        for my $lCol (0..(@{$aInHeadings} -1))
        {
	    $lTable .= UcsSimple::Util::getIndent($aInIndent + 2) . qq%<th scope="col"> $aInHeadings->[$lCol] </th>% . "\n";
        }
        $lTable .= UcsSimple::Util::getIndent($aInIndent) . '</tr>' . "\n";
    }

    # Print out table row by row
    my $lRowNum = 0;
    foreach my $lRow (@{$aInRows})
    {
        if (defined($aInHeadings) && (@{$lRow} != (@{$aInHeadings})))
        {
            confess "Number of columns not equal to number of headings";
        }

        my $lClass="spec";
        my $lTdClass = "";
        if ($lRowNum %2)
        {
            $lClass="specalt";
            $lTdClass= qq%class="alt"%;
        }

        $lTable .= UcsSimple::Util::getIndent($aInIndent+2) . '<tr>' . "\n";
        for my $lCol (0..(@{$lRow} -1))
        {
            if (!$lCol)
            {
                # First column is heading for row
	        $lTable .= UcsSimple::Util::getIndent($aInIndent+2) . qq%<th scope="row" class="$lClass"> $lRow->[$lCol] </th>% . "\n";
            }
            else
            {
	        $lTable .=  UcsSimple::Util::getIndent($aInIndent+2) . qq%<td $lTdClass> $lRow->[$lCol] </td>% . "\n";
	        # print UcsSimple::Util::getIndent($aInIndent+2) . qq%<td $lTdClass> $lRow->[$lCol] </td>% . "\n";
	        if ((!(exists $lRow->[$lCol])) || (!defined($lRow->[$lCol])))
                {
                    confess "SCREWED UP!";
                    exit 1;
                }
            }
        }
        $lTable .= UcsSimple::Util::getIndent($aInIndent+1) . '</tr>' . "\n";
        $lRowNum++;
    }
    $lTable .=  UcsSimple::Util::getIndent($aInIndent+1) . '</table>'  . "\n";
    return $lTable;
}



{
    package AppConfig;
    use UcsSimple::Util;
    use Carp qw(croak cluck confess);
    use Log::Log4perl qw (get_logger);

    use Data::Dumper;
    use Class::MethodMaker
        [ 
            scalar => [ qw/ uri userName password backupHome backupDir cfgDir startTime spDns logCfgFile schemaFile / ],
        ];

    sub new 
    {
        my ($aInClass, $aInRefArgs) = @_;
        my $self = {};
        bless $self, $aInClass;

        $self->spDns([]);

        foreach my $lName ( qw/ uri userName password backupHome backupDir cfgDir startTime spDns logCfgFile schemaFile /)
        {
            if (exists $aInRefArgs->{$lName})
            {
                $self->$lName($aInRefArgs->{$lName});
            }
        }
        return $self;
    }
}


sub loadConfig
{
    my ($aInRefArgs) = @_;
    my $lAppCfg = AppConfig->new();

    if (!exists($aInRefArgs->{'configFile'}))
    {
        confess "Missing mandator argument: configFile";
    }
    my $aInCfgFile = $aInRefArgs->{'configFile'};

    my $lConfig = undef;
    read_config($aInCfgFile => $lConfig);

    my $lLogCfgFile = $lConfig->{'APP'}->{'LOG4PERL'}; 
    if (defined($lLogCfgFile))
    {
        $lAppCfg->logCfgFile($lLogCfgFile); 
    }

    my $lSchemaFile = $lConfig->{'APP'}->{'SCHEMA'}; 
    if (!defined($lSchemaFile))
    {
    	die "Missing mandatory schema file";
    }
    $lAppCfg->schemaFile($lSchemaFile); 

    my $lBackupHome = $lConfig->{'APP'}->{'BACKUP_HOME'}; 
    if (!defined($lBackupHome))
    {
    	die "Missing mandatory backup directory";
    }
    my $lHome = File::Spec->canonpath( $lBackupHome ) ;
    $lAppCfg->backupHome($lHome); 

    my $lUri = $lConfig->{'UCS'}->{'URI'}; 
    my $lUname = $lConfig->{'UCS'}->{'UNAME'}; 
    my $lPasswd = $lConfig->{'UCS'}->{'PASSWORD'};
    
    if ((!defined($lUri)) || (!defined($lUname)) || (!defined($lPasswd)))
    {
    	die "Missing necessary connection settings";
    }    
    $lAppCfg->uri($lUri);
    $lAppCfg->userName($lUname);
    $lAppCfg->password($lPasswd);

    my $lSpDns = $lConfig->{'APP'}->{'SP_DN'};

    if (!defined($lSpDns))
    {
        die "Missing service profile dns"; 
    } 

    if (ref $lSpDns eq "ARRAY")
    {
        $lAppCfg->spDns($lSpDns);
    }
    else
    {
        $lAppCfg->spDns([$lSpDns]);
    } 

    return $lAppCfg;
}


{
    package SpInfo;
    use Carp qw(croak cluck confess);

    use Data::Dumper;
    use Class::MethodMaker
        [
            scalar => [ qw/ dn assignState assocState type srcTemplName isInstance pooled poolName poolDn foundSp foundPhys pnDn physClass availPhysInPool filename policyRefs policyCfgFiles / ],
        ];

    sub new 
    {
        my ($aInClass, $aInRefArgs) = @_;
        my $self = {};
        bless $self, $aInClass;
        
        # Set our class element map to an empty map ref;
        $self->foundSp(0);
        $self->isInstance(0);
        $self->srcTemplName("");
        $self->foundPhys(0);
        $self->faultCount(0);
        $self->type("");
        $self->{spClassElements} = {};
        $self->{physClassElements} = {};
        $self->{allClassElements} = {};
        $self->{faults} = [];
        $self->policyRefs({});
        $self->policyCfgFiles({});

        if (!(exists $aInRefArgs->{'dn'}))
        {
            confess "Missing mandatory argument: dn";
        }


        foreach my $lName ( qw/ dn assignState assocState type srcTemplName isInstance pooled poolName poolDn foundSp foundPhys pnDn availPhysInPool physClass / )
        {
            if (exists $aInRefArgs->{$lName})
            {
                $self->$lName($aInRefArgs->{$lName});
            }
        }

        # Set filename based on dn;
        my $lFname = $self->dn();
        $lFname  =~ s/[^A-Za-z0-9\-\.]/_/g;
        $self->filename($lFname);

        $self->updateElements();
        return $self;
    }


    sub spClassElements
    {
        my ($self, $aInClassElementMap) = @_;
        ref ($self) or confess "Instance required";

        if (defined($aInClassElementMap))
        {
            $self->{'spClassElements'} = $aInClassElementMap;
            $self->updateElements(); 
        }
        return $self->{'spClassElements'};
    }


    sub physClassElements
    {
        my ($self, $aInClassElementMap) = @_;
        ref ($self) or confess "Instance required";

        if (defined($aInClassElementMap))
        {
            $self->{'physClassElements'} = $aInClassElementMap;
            $self->updateElements(); 
        }
        return $self->{'physClassElements'};
    }

    sub faults
    {
        my ($self) = @_;
        ref ($self) or confess "Instance required";
        return $self->{'faults'};
    }

    sub faultCount
    {
        my ($self, $aInClassElementMap) = @_;
        ref ($self) or confess "Instance required";
        return $self->{'faultCount'};
    }

    sub allClassElements
    {
        my ($self, $aInClassElementMap) = @_;
        ref ($self) or confess "Instance required";
        return $self->{'allClassElements'};
    }

    sub getElementsOfClass
    {
        my ($self, $aInClass) = @_;
        ref ($self) or confess "Instance required";

        my $lResult = {};        
        my $lAllClassElements = $self->{'allClassElements'};
        if (exists $lAllClassElements->{$aInClass})
        {
            return $lAllClassElements->{$aInClass};
        }
        return [];
    }

    sub updateElements 
    {
        my ($self, $aInClassElementMap) = @_;
        ref ($self) or confess "Instance required";

        my $lAllClassElementMap = {};
        my $lPhysElements = $self->physClassElements();
        foreach my $lClass (keys %{$lPhysElements})
        {
            if (!exists $lAllClassElementMap->{$lClass}) 
            {
                $lAllClassElementMap->{$lClass} = [];
            }
            foreach my $lElement (@{$lPhysElements->{$lClass}})
            {
                push @{$lAllClassElementMap->{$lClass}}, $lElement;
            }
        }

        my $lSpElements = $self->spClassElements();
        foreach my $lClass (keys %{$lSpElements})
        {
            if (!exists $lAllClassElementMap->{$lClass}) 
            {
                $lAllClassElementMap->{$lClass} = [];
            }
            foreach my $lElement (@{$lSpElements->{$lClass}})
            {
                push @{$lAllClassElementMap->{$lClass}}, $lElement;
            }
        }
        $self->{'allClassElements'} = $lAllClassElementMap;

        my $lFaultCount = 0;
        my $lFaults = [];
        if (exists $lAllClassElementMap->{'faultInst'})
        {
            foreach my $lFault (@{$lAllClassElementMap->{"faultInst"}})
            {
                push @{$lFaults}, $lFault;
                $lFaultCount++; 
            }
        }
        $self->{faults} = $lFaults;
        $self->{faultCount} = $lFaultCount;
    }


}



# Print usage message.
sub usage
{
    print "For usage information:\n";
    print "\n\tperldoc monitor-sp\n\n";
    exit;
}

__END__


=head1 NAME

monitor-sp - monitor service profiles for a list of fatal faults.
             If the service profile is associated with a compute pool and 
             a fatal fault occurs, the script will decomission the server
             and re-assign the service profile to the pool (to get another server).



=head1 USAGE

event-reader [options]

    monitor-sp --cfg=./cfg/demo.conf

=head1 CONFIGURATION FILE CONTENTS

    [UCS]
    URI	= https://nikon-A/nuova
    UNAME = admin
    PASSWORD = Nbv12345

    [APP]

    LOG4PERL = /home/ikent/demo/cfg/log.cfg

    # SERVICE PROFILES TO MONITOR
    SP_DN = org-root/org-finance/ls-DoesNotExist
    SP_DN = org-root/org-finance/ls-SilverVm1
    SP_DN = org-root/org-finance/ls-SilverVm2
    SP_DN = org-root/org-finance/ls-SilverVm3
    SP_DN = org-root/org-finance/ls-SilverVm4
    SP_DN = org-root/org-finance/ls-SilverVm5
    SP_DN = org-root/org-finance/ls-SilverVm6
    SP_DN = org-root/org-finance/ls-SilverVm7
    SP_DN = org-root/org-finance/ls-SilverVm8
    SP_DN = org-root/org-finance/ls-SilverVm9
    SP_DN = org-root/org-finance/ls-SilverVm10


d1 SEE ALSO

L<LOG4PERL> for log4perl configuration file.
L<UcsSimple::EventUtil>
L<UcsSimple::Session>
L<UcsSimple::CommMgr>
L<UcsSimple::Util>
L<UcsSimple::XmlUtil>

=head1 AUTHOR

Ike Kent, C<< <ikent at cisco.com> >>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc event-reader

You can also look for information at:

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Ike Kent.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut

