#!/usr/bin/perl

use strict;
use warnings;

use XML::LibXML;
use Getopt::Long;
use Carp qw(croak cluck confess);
use Log::Log4perl qw (get_logger);
use Config::Std;
use File::Spec;
use File::Copy::Recursive qw(dircopy);
use DateTime;
use Perl6::Slurp;

use UcsSimple::DomUtil;
use UcsSimple::SchemaParser;

use constant ELEMENT_NODE => 1;

my $lCfgFile = undef;
my $lXmlFile = undef;

my $lSpInfoMap = {};
my $lCreatedPolicyCfgFileMap = {};
my $lPolicyCfgByClassMap = {};

# Attributes that name policies in SP 
my $SP_POLICY_MAP = {
    "self" => "Self",
    "biosProfileName" => "Bios Profile",
    "bootPolicyName" => "Boot Policy",
    "dynamicConPolicyName" => "Dynamic Connection Policy",
    "hostFwPolicyName" => "Host F/W Policy",
    "mgmtFwPolicyName" => "Mgmt F/W Policy",
    "powerPolicyName" => "Power Policy",
    "scrubPolicyName" => "Scrub Policy",
    "statsPolicyName" => "Stats Policy",
    "vconProfileName" => "Vcon Profile",
    "localDiskPolicyName" => "Local Disk Policy",
    "maintPolicyName" => "Maintenance Policy",
    "mgmtAccessPolicyName" => "Mgmt Access Policy",
    "solPolicyName" => "SOL Policy",
    "srcTemplName" => "Source Template"
};


# Attributes that name policies in VNIC eth
my $VNIC_ETHER_POLICY_MAP = {
    "adaptorProfileName" => "Adapter Profile",
    "nwCtrlPolicyName" => "Network Control Policy",
    "qosPolicyName" => "QOS Policy",
    "statsPolicyName" => "Stats Policy",
    "nwTemplName" => "Template"
};


# Attributes that name policies in VNIC fc
my $VNIC_FC_POLICY_MAP = {
    "adaptorProfileName" => "Adapter Profile",
    "qosPolicyName" => "QOS Policy",
    "statsPolicyName" => "Stats Policy",
    "nwTemplName" => "Template",
};


# Command line options 
my $options_okay = GetOptions (
    'cfg=s'   =>  \$lCfgFile,      # A config file with application settings
    'xml=s'   =>  \$lXmlFile,      

    # Standard meta-options
    'usage'			=> sub { usage(); },
    'help'			=> sub { usage(); },
);

usage() if ((!$options_okay) || (!defined($lCfgFile))  || (!defined($lXmlFile)));

if (!(-r $lXmlFile))
{
    print "Backup xml file is not readable.\n";
    usage();
}
 

# Load our application specific settings
my $lAppCfg = loadConfig({configFile => $lCfgFile});

# Initialize logging
initLogging($lAppCfg->logCfgFile());

# Load class meta from schema - we will use to generate config xml
my $lSchemaParser = UcsSimple::SchemaParser->new({schema => $lAppCfg->schemaFile});
my $lClassMeta = $lSchemaParser->getClassMeta();
$lClassMeta->applyTypicalUcsMods();

# Create directory structure for our report
initReport();

my $lXmlParser = XML::LibXML->new();
my $lXmlDoc = $lXmlParser->parse_file($lXmlFile);
UcsSimple::DomUtil::populateDn($lXmlDoc, 1);

# Organize local MIT as collection of DOM elements
my $lClassElMap = UcsSimple::DomUtil::getElementsByClass($lXmlDoc);
my $lDnElMap = UcsSimple::DomUtil::getElementByDn($lXmlDoc);

# Keep a map of information for each service profile 
$lSpInfoMap = organizeSpInfo({ classElMap => $lClassElMap, dnElMap => $lDnElMap });

createPolicyConfigs({ classMeta => $lClassMeta, dnElMap => $lDnElMap, classElMap => $lClassElMap });

printDomainInfo({ spInfoMap => $lSpInfoMap, dnElMap => $lDnElMap, classElMap => $lClassElMap });

# Produce a report for each service profile
foreach my $lSpDn (keys %{$lSpInfoMap})
{
    my $lSpInfo = $lSpInfoMap->{$lSpDn};
    resolveSpProlicyRefs({ spInfo => $lSpInfo, classMeta => $lClassMeta, dnElMap => $lDnElMap });
    printSpInfo({ spInfo => $lSpInfo, dn => $lSpDn });
}

exit 0;



sub initLogging
{
    my ($aInLogCfgFile) = @_;

    if (defined($aInLogCfgFile))
    {
        Log::Log4perl::init_and_watch($aInLogCfgFile, 5);
        get_logger(__PACKAGE__)->debug(
            "Log configuration file: $aInLogCfgFile");
    }
    else
    {
        my $lConf = q(
            log4perl.category = DEBUG, Logfile
            log4perl.appender.Logfile          = Log::Log4perl::Appender::File
            log4perl.appender.Logfile.filename = debug.log
            log4perl.appender.Logfile.layout = Log::Log4perl::Layout::PatternLayout
            log4perl.appender.Logfile.layout.ConversionPattern = [%p][%d][%F:%L] %m%n
            log4perl.appender.Logfile.mode     = write
            log4perl.appender.Logfile.main     = DEBUG
        );
        Log::Log4perl::init(\$lConf);
        get_logger(__PACKAGE__)->debug(
            "No log configuration file -using reasonable defaults");
    }
}




# Initialize report structure
sub initReport
{
    # Create report directory 
    if (!(-d $lAppCfg->backupHome()))
    {
        die "Backup home directory does not exist";
    }

    if (!(-d $lAppCfg->cssDir()))
    {
        die "CSS directory does not exist";
    }

    my ($lVolume, $lDir, $lXmlFilename) = File::Spec->splitpath($lXmlFile);

    my $lBackupDir = 'REPORT-' . $lXmlFilename;
    if ($lBackupDir =~ /(.*).xml$/)
    {
        $lBackupDir = $1;
    }
    my $lQualBackupDir = File::Spec->catfile( $lAppCfg->backupHome(), $lBackupDir );

    $lAppCfg->backupDir($lQualBackupDir);
    mkdir $lQualBackupDir or die "Could not create backup directory ($lQualBackupDir) $!";

    my $lCfgDir = File::Spec->catfile( $lAppCfg->backupDir(), "cfg");
    $lAppCfg->cfgDir($lCfgDir);
    mkdir $lCfgDir or die "Could not create config directory ($lCfgDir) $!";

    # Copy the css directory to my backup directory
    my $lCssSrcDir = File::Spec->canonpath( $lAppCfg->cssDir() );
    my $lAssetDir = File::Spec->catfile( $lQualBackupDir, "assets");
    dircopy($lCssSrcDir, $lAssetDir) or die "Could not copy css directory $!";
}



sub getDocHead
{

    my $lDocHead = <<'END_HEAD';
<!doctype html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>UCS Domain Snapshot Report </title>

       <!-- Include Styles -->
        <link rel="stylesheet" href="assets/themes/smoothness/jquery-ui.css" />		
        <link rel="stylesheet" href="assets/css/styles.css" />		
        <!--[if IE 7]><style type="text/css">#v-nav>ul>li.current{border-right:1px solid #fff!important}#v-nav>div.tab-content{z-index:-1!important;left:0}</style><![endif]-->
        <!--[if IE 8]><style type="text/css">#v-nav>ul>li.current{border-right:1px solid #fff!important}#v-nav>div.tab-content{z-index:-1!important;left:0}</style><![endif]-->
    </head>

    <body>

        <ul id="nav">
	    <li>
	        <a href="index.html" title="Home">Home</a>
            </li> 
	    <li> 
                <a href="https://developer.cisco.com" title="Cisco Developers Network">CDN</a>
            </li> 
            <li> 
                <a href="https://communities.cisco.com/community/technology/datacenter/ucs_management" title="Communities">Communities</a>
            </li> 
            <li> 
                <a href="https://supportforums.cisco.com/community/netpro/data-center/unified-computing" title="Support Forums">Support Forums </a>
            </li> 
            <li> 
                <a href="index.html#tab15" title="About">About</a>
            </li> 
        </ul>

END_HEAD

    return $lDocHead;
}



sub getSpTabs
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};
    my $lTitle = '<h2 class="title">Service Profile: ' . $aInDn . '</h2>';
    my $lTabs = $lTitle . <<'END_HEAD';

            <div id="v-nav">

                <ul>
                    <li tab="tab1" class="first current">Overview</li>
                    <li tab="tab2">Identities</li>
                    <li tab="tab3">Network</li>
                    <li tab="tab4">Storage</li>
                    <li tab="tab5">Hardware</li>
                    <li tab="tab6">Firmware</li>
                    <li tab="tab7">Faults</li>
                    <li tab="tab8">Configs</li>
                </ul>

END_HEAD

    return $lTabs;
}



sub getNavTabs
{
    my $lTabs = <<'END_HEAD';
        <h2 class="title">UCS Domain Backup </h2>

            <div id="v-nav">

                <ul>
                    <li tab="tab1" class="first current">Domain</li>
                    <li tab="tab2"> Service Profiles</li>
                    <li tab="tab3"> Faults</li>
                    <li tab="tab4"> Hardware </li>
                    <li tab="tab5"> Firmware </li>
                    <li tab="tab6"> LAN </li>
                    <li tab="tab7"> SAN </li>
                    <li tab="tab8"> UUIDs </li>
                    <li tab="tab9"> MACs </li>
                    <li tab="tab10"> WWNs </li> 
                    <li tab="tab11"> IPs </li>
                    <li tab="tab12"> IQNs </li>
                    <li tab="tab13"> Queries </li>
                    <li tab="tab14">Configs</li>
                    <li tab="tab15"> About </li>
                </ul>

END_HEAD

    return $lTabs;
}



sub getAboutText
{
    my $lText = <<'END_HEAD';

<p>
This report was produced by the 
<a href="https://github.com/greygoose/UcsSimple-CommMgr/tree/master/demo/ucs-snapshot.tar.gz" title="UCSM Snapshot Report">UCSM Snapshot Report </a>
application based on an MIT Snapshot.  For details on how to take an MIT Snapshot and/or generate a UCSM Snapshot Report, consult the
<a href="https://github.com/greygoose/UcsSimple-CommMgr/blob/master/demo/ucs-snapshot/README" title="README">README</a>
</p>
<p>
The foundation of a UCSM Backup strategy should be to collect Full State and ALL Configuration Backups of the system
at regular intervals.  A UCSM MIT Snapshot can provide a useful addition to this strategy since it provides a complete
MIT Snapshot that can be browsed and processed off-line in order to check the configuration and operational state of a UCS
domain.  
</p>

<p>
Please note, that we extract a sub-set of the pertinent information contained in the UCSM MIT Snapshot. 
This UCSM Snapshot Report application is provided for demonstration purposes only.  
You can redistribute it and/or modify it as you wish.
</p>

<h4>Author</h4>
<p>
Written by Ike Kent. 
</p>


END_HEAD

    return $lText;
}


sub getDocTail
{

    my $lDocTail = <<'END_TAIL';

         </div>

        </section>

        <script type="text/javascript" src="assets/jquery/1.7.2/jquery.min.js"></script> 
        <script type="text/javascript" src="assets/jquery-ui/1.10.3/jquery-ui.js"></script> 
        <script type="text/javascript" src="assets/jquery-hashchange/jquery.ba-hashchange.js"></script>       
        <script type="text/javascript" src="assets/js/script.js"></script>

    </body>
</html>

END_TAIL

   return $lDocTail

}



sub printDomainInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    my $lIdxFileName = File::Spec->catfile( $lAppCfg->backupDir(), 'index.html');
    open my $lFh, '>', $lIdxFileName or die "Cannot open file $lIdxFileName $!";

    my $lHead = getDocHead();
    print $lFh $lHead;

    my $lTabs = getNavTabs();
    print $lFh $lTabs;

    printDomainOverview({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # LINKS TO SP's 
    #
    printSpNavList({ spInfoMap => $aInSpInfoMap, fhandle => $lFh });
 
    # 
    # ALL FAULT INFORMATION
    #
    printFaultInfo({ classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # H/W INFORMATION
    #
    printHardwareInfo({ classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # F/W INFORMATION
    #
    printFirmwareInfo({ classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # LAN INFO
    #
    printLanInfo({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # SAN INFO
    #
    printSanInfo({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # IDENTITY INFO
    #
    printUuidInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });
    printMacInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });
    printWwnInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });
    printIpInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });
    printIqnInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # QUERY INFORMATION
    #
    printQueryInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # POLICY CONFIG INFORMATION
    #
    printConfigInfo({ fhandle => $lFh });

    # 
    # ABOUT TEXT
    #
    printAboutInfo({ fhandle => $lFh });

    my $lTail = getDocTail();
    print $lFh $lTail; 

}



sub printDomainOverview
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lSummaryTable = "";
    my $lRows = [];
    foreach my $lTopSystem (@{$aInClassElMap->{'topSystem'}})
    {
        my $lRow = [];
        push @{$lRow}, "Name";
        push @{$lRow}, $lTopSystem->getAttribute('name');
        push @{$lRows}, $lRow;

    	$lRow = [];
        push @{$lRow}, "Address";
        push @{$lRow}, $lTopSystem->getAttribute('address');
        push @{$lRows}, $lRow;

    	$lRow = [];
        push @{$lRow}, "Mode";
        push @{$lRow}, $lTopSystem->getAttribute('mode');
        push @{$lRows}, $lRow;

    	$lRow = [];
        push @{$lRow}, "System Up Time";
        push @{$lRow}, $lTopSystem->getAttribute('systemUpTime');
        push @{$lRows}, $lRow;
    }

    $lSummaryTable = getHtmlTable({
        rows => $lRows,
    });


    my $lMgmtTable = "";
    $lRows = [];
    foreach my $lMgmtEntity (@{$aInClassElMap->{'mgmtEntity'}})
    {
        my $lRow = [];
        push @{$lRow}, $lMgmtEntity->getAttribute("dn");
        push @{$lRow}, $lMgmtEntity->getAttribute("haReady");
        push @{$lRow}, $lMgmtEntity->getAttribute("haReadiness");
        push @{$lRow}, $lMgmtEntity->getAttribute("id");
        push @{$lRow}, $lMgmtEntity->getAttribute("mgmtServicesState");
        push @{$lRow}, $lMgmtEntity->getAttribute("problems");
        push @{$lRows}, $lRow;
    }

    $lMgmtTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN", "H/A Ready", "H/A Readiness", "ID", "Mgmt Services State", "Problems"],
    });

    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lSummaryTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lMgmtTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




sub printSpNavList
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = []; 
    my $lHeadings  = [ "Service Profile", "Type", "Physical Node" ];
    foreach my $lSpDn (keys %{$aInSpInfoMap})
    {
        my $lSpInfo = $aInSpInfoMap->{$lSpDn};
        my $lSpFileName = $lSpInfo->filename() . '.html';

        my $lRow = [];
        my $lSpLink .= qq%<a href="$lSpFileName"> $lSpDn </a>%;
        push @{$lRow}, $lSpLink;

        push @{$lRow}, $lSpInfo->type();

        my $lPnDn = $lSpInfo->pnDn();
        push @{$lRow}, defined($lPnDn) ? $lPnDn : "none";

        push @{$lRows}, $lRow;
    }

    my $lSpTable = getHtmlTable({
        rows => $lRows,
        headings => $lHeadings,
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lSpTable;
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printSpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    my $lFileName = File::Spec->catfile( $lAppCfg->backupDir(), ($aInSpInfo->filename() . '.html') );
    open my $lFh, '>', $lFileName or die "Cannot open file $lFileName $!";

    my $lHead = getDocHead();
    print $lFh $lHead;

    my $lTabs = getSpTabs({dn => $aInDn});
    print $lFh $lTabs;

    my $lAllClassElMap = $aInSpInfo->allClassElements();

    # 
    # SP SUMMARY
    # 
    printSpOverviewInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # IDENTITY
    #
    printSpIdentityInfo({ spInfo => $aInSpInfo, classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # NETWORK INFORMATION
    #
    printSpNetworkInfo({ spInfo => $aInSpInfo, classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # STORAGE INFORMATION
    #
    printSpStorageInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # H/W INFORMATION
    #
    printHardwareInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # F/W INFORMATION
    #
    printFirmwareInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # FAULT INFORMATION
    #
    printFaultInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # POLICY CONFIG INFORMATION
    #
    printSpConfigInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    my $lTail = getDocTail();
    print $lFh $lTail; 
}



# Combine maps of arrays 
sub addElMap
{
    my ($aInElMapOne, $aInElMapTwo) =  @_;

    foreach my $lKey (keys %{$aInElMapTwo})
    {
        if (exists $aInElMapOne->{$lKey})
        {
            $aInElMapOne->{$lKey} = \(@{$aInElMapOne->{$lKey}}, @{$aInElMapTwo->{$lKey}});
        }
        else
        {
            $aInElMapOne->{$lKey} = $aInElMapTwo->{$lKey};
        }
    }

    return $aInElMapOne;
} 



sub organizeSpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};
    my $lSpInfoMap = {};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    # Iterate over all service profiles
    foreach my $lsServer (@{$aInClassElMap->{'lsServer'}})
    {
        my $lDn = $lsServer->getAttribute('dn');

        # Organize results by class name (for printing out)
        my $lSpClassElMap = UcsSimple::DomUtil::getElementsByClass($lsServer);

        my $lType = $lsServer->getAttribute('type'),
        my $lIsInstance = 0;
        if ($lType =~ /instance/)
        {
            $lIsInstance = 1;
        }

        # Determine physical information
        my $lPnDn = $lsServer->getAttribute('pnDn');
        my $lFoundPhys = 0;
        my $lPhysClassElMap = {};
        my $lPhysClass = undef;
        my $lPhysEl = undef;
        if (length($lPnDn) <  1)
        {
            $lPnDn = undef;
        }
        else
        {
            $lPhysClass = getPhysClass($lPnDn);
            if (exists $aInDnElMap->{$lPnDn})
            {
                $lPhysEl = $aInDnElMap->{$lPnDn};

                # Organize results by class name (for later processing)
                $lPhysClassElMap = UcsSimple::DomUtil::getElementsByClass($lPhysEl);
                $lFoundPhys = 1;
            }
        }

        my $lSpInfo = SpInfo->new({
            'dn' => $lsServer->getAttribute('dn'),
            'spEl' => $lsServer, 
            'physEl' => $lPhysEl,
            'pnDn' => $lPnDn,
            'foundPhys' => $lFoundPhys,
            'physClass' => $lPhysClass,
            'assignState' => $lsServer->getAttribute('assignState'),
            'assocState' => $lsServer->getAttribute('assocState'),
            'type' => $lType,
            'isInstance' => $lIsInstance,
            'spClassElements' => $lSpClassElMap,
            'physClassElements' => $lPhysClassElMap,
        });

        # Pool information from lsReq
        my @lsReqs =  $lsServer->getElementsByTagName('lsRequirement');
        foreach my $lsReq (@lsReqs)          
        {
            my $lPoolDn = $lsReq->getAttribute('pnPoolDn');
            my $lPoolName = $lsReq->getAttribute('name');
            if ((length $lPoolDn) > 0)
            {
                $lSpInfo->poolName($lPoolName);
                $lSpInfo->pooled(1);
                $lSpInfo->poolDn($lPoolDn);
            }
        }

        $lSpInfoMap->{$lDn} = $lSpInfo;
        determineReferences ({spInfo  => $lSpInfo });
    }
    return $lSpInfoMap;
}



sub getPhysClass
{
    my ($aInPnDn) = @_;
    my $lPhysClass = undef;

    if (defined($aInPnDn))
    {
        if ($aInPnDn =~ /blade/)
        {
            $lPhysClass = "computeBlade";
        }
        elsif ($aInPnDn =~ /rack/)
        {
            $lPhysClass = "computeRackUnit";
        }
    }
}



sub determineReferences 
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    my $lSpDn = $aInSpInfo->dn();
    my $lSpEl = $aInSpInfo->spEl();

    confess "SP Element not defined" if (!defined($lSpEl));
    confess "SP Element not defined" if (!defined($lSpDn));

    my $lSpClassElMap = $aInSpInfo->spClassElements();

    # 
    # Determine all the references to policies in the SP 
    # 
    my $lPolicyRefMap = $aInSpInfo->policyRefs();
    if (!exists($lPolicyRefMap->{$lSpDn}))
    {
        $lPolicyRefMap->{$lSpDn} = {};
    }

    foreach my $lAdminName (keys %{$SP_POLICY_MAP})
    {
        if ($lAdminName =~ /^self$/)
        {
            $lPolicyRefMap->{$lSpDn}->{'self'} = $lSpDn;
        }
        else
        {
            my $lOperName = 'oper' . (ucfirst $lAdminName);
            my $lOperPolicyDn = $lSpEl->getAttribute($lOperName);
            $lPolicyRefMap->{$lSpDn}->{$lAdminName} = $lOperPolicyDn;
        }
    }


    # 
    # Determine all the references to policies in the vnics
    #
    if (exists $lSpClassElMap->{'vnicEther'})
    {
        foreach my $lElement (@{$lSpClassElMap->{'vnicEther'}})
        {
            my $lDn = $lElement->getAttribute("dn");
            if (!exists($lPolicyRefMap->{$lDn}))
            {
                $lPolicyRefMap->{$lDn} = {};
            }
            foreach my $lAdminName (keys %{$VNIC_ETHER_POLICY_MAP})
            {
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperPolicyDn = $lElement->getAttribute($lOperName);
                $lPolicyRefMap->{$lDn}->{$lAdminName} = $lOperPolicyDn;
            }
        }
    }


    # 
    # Determine all the references to policies in the vhbas
    # 
    if (exists $lSpClassElMap->{'vnicFc'})
    {
        foreach my $lElement (@{$lSpClassElMap->{'vnicFc'}})
        {
            my $lDn = $lElement->getAttribute("dn");
            if (!exists($lPolicyRefMap->{$lDn}))
            {
                $lPolicyRefMap->{$lDn} = {};
            }
            foreach my $lAdminName (keys %{$VNIC_FC_POLICY_MAP})
            {
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperPolicyDn = $lElement->getAttribute($lOperName);
                $lPolicyRefMap->{$lDn}->{$lAdminName} = $lOperPolicyDn;
            }
        }
    }
}



sub createPolicyConfigs
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classMeta'}))
    {
        confess "Missing mandator argument: classMeta";
    }
    my $aInClassMeta = $aInRefArgs->{'classMeta'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    my $lPolicyClasses = 
    [ 
        # Server Tab
        "aaaEpAuthProfile",
        "adaptorHostEthIfProfile", 
        "adaptorHostIscsiProfile", 
        "adaptorHostFcIfProfile",   
        "biosVProfile", 
        "computePlatform", 
        "lsbootPolicy", 
        "firmwareComputeHostPack", 
        "storageLocalDiskConfigPolicy",
        "lsmaintMaintPolicy",
        "powerPolicy", 
        "computeScrubPolicy",
        "solPolicy",
        "computePoolingPolicy",
        "computeQual",
        "statsThreshold",
        "iscsiAuthProfile",
        "fabricVConProfile",

        # Network Tab
        "qosclassDefinition", 
        "fabricLanPinGroup",
        "statsThresholdPolicy", 
        "fabricNetGroup",
        "nwctrlDefinition", 
        "vnicVnicBehPolicy",
        "vnicDynamicConPolicy", 
        "flowctrlItem", 
        "vnicLanConnPolicy", 
        "fabricMulticastPolicy",
        "epqosDefinition" ,
        "vnicLanConnTempl", 

        # Storage Tab
        "fabricSanPinGroup", 
        "vnicVhbaBehPolicy",
        "vnicSanConnPolicy", 
        "storageConnectionPolicy", 
        "vnicSanConnTempl",

        # Identities
        "macpoolPool",
        "uuidpoolPool",
        "iqnpoolPool",
        "ippoolPool",
        "iqnpoolPool",
        "fcpoolInitiators",
    ];

    # 
    # Get configs for all of the above classes
    # 
    foreach my $lClass (@{$lPolicyClasses})
    {
        if (exists $aInClassElMap->{$lClass})
        {
            foreach my $lElement (@{$lClassElMap->{$lClass}})
            {
                my $lDn = $lElement->getAttribute("dn");
                if (defined($lDn)) 
                {
                    createPolicyCfgFiles({ dn=>$lDn, dnElMap=>$aInDnElMap, classMeta=> $aInClassMeta });
                }
            }
        }
    }
}


sub resolveSpProlicyRefs
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'classMeta'}))
    {
        confess "Missing mandator argument: classMeta";
    }
    my $aInClassMeta = $aInRefArgs->{'classMeta'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    my $lSpDn = $aInSpInfo->dn();

    # 
    # Determine all the references to policies in the SP 
    # 
    my $lPolicyRefMap = $aInSpInfo->policyRefs();
    my $lPolicyFileMap = {};
    foreach my $lDn (keys %{$lPolicyRefMap})
    {
        foreach my $lPolicyName (keys %{$lPolicyRefMap->{$lDn}})
        {
            my $lPolicyDn = $lPolicyRefMap->{$lDn}->{$lPolicyName};
            if (defined($lPolicyDn)  && (length $lPolicyDn > 0))
            {
                if (exists $aInDnElMap->{$lPolicyDn})
                {
                    $lCfgFile = getPolicyCfgFileName({ dn => $lPolicyDn, suffix => '.html'});
                    $lPolicyFileMap->{$lPolicyDn} = $lCfgFile;
                    createPolicyCfgFiles({dn=>$lPolicyDn, dnElMap=>$aInDnElMap, classMeta=> $aInClassMeta });
                }
            }
        }
    }
    $aInSpInfo->policyCfgFiles($lPolicyFileMap);
}



sub createPolicyCfgFiles
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'classMeta'}))
    {
        confess "Missing mandator argument: classMeta";
    }
    my $aInClassMeta = $aInRefArgs->{'classMeta'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if ((!exists $lCreatedPolicyCfgFileMap->{$aInDn}) &&
        (exists $aInDnElMap->{$aInDn}))
    {
        my $lPolicyElement = $aInDnElMap->{$aInDn};
        my $lClassName = $lPolicyElement->localname();

        # Create file with configConfMo for the policy 
        my $lCfgDoc = UcsSimple::DomUtil::getConfigConfMo({doc=>$lPolicyElement, classMeta=>$aInClassMeta});
        my $lCfgXml = $lCfgDoc->toString(2); 

        # Create xml file with this policy
        my $lCfgFile = getPolicyCfgFileName({ dn => $aInDn, suffix => '.xml'});
        open my $lFh, '>', $lCfgFile or die "Cannot open file $lCfgFile $!";
        print $lFh $lCfgXml;
        close $lFh;

        # Create html file with this policy
        my $lHtmlFile = getPolicyCfgFileName({ dn => $aInDn, suffix => '.html'});
        open $lFh, '>', $lHtmlFile or die "Cannot open file $lHtmlFile $!";
        my $lHtml = getHtmlCfgDoc({dn => $aInDn, doc => $lCfgXml}); 
        print $lFh $lHtml;
        close $lFh;

        # We keep track of files created by dn and class name/dn
        if (!exists($lPolicyCfgByClassMap->{$lClassName}))
        {
            $lPolicyCfgByClassMap->{$lClassName} = {}; 
        }

        $lPolicyCfgByClassMap->{$lClassName}->{$aInDn} = $lHtmlFile;
        $lCreatedPolicyCfgFileMap->{$aInDn} = $lHtmlFile;
    }
}


# 
sub getHtmlCfgDoc
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'doc'}))
    {
        confess "Missing mandator argument: doc";
    }
    my $aInDoc = $aInRefArgs->{'doc'};


    my $lDocHead = <<END_HEAD1;
<html>
    <head>
        <meta charset="utf-8" />

        <title>Config xml for $aInDn </title>
    </head>
    <body>
        <pre>
        <code>
END_HEAD1

    my $lCfgHtml = UcsSimple::Util::xmlToHtml($aInDoc);

    my $lDocTail = <<'END_TAIL';
        </code>
        </pre>
    </body>
</html>

END_TAIL

    my $lDoc = $lDocHead . $lCfgHtml . $lDocTail;

    return $lDoc;
}



sub getPolicyCfgFileName
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'suffix'}))
    {
        confess "Missing mandator argument: suffix";
    }
    my $aInSuffix = $aInRefArgs->{'suffix'};

    my $lFilename = $aInDn;
    $lFilename  =~ s/[^A-Za-z0-9\-\.]/_/g;
    $lFilename  .= $aInSuffix;
    my $lCfgFile = File::Spec->catfile($lAppCfg->cfgDir(), $lFilename);

    return $lCfgFile;
}



sub printSpConfigInfo
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lElement = $aInSpInfo->spEl();

    # 
    # Determine all the references to policies in the SP 
    # 
    my $lRows = [];
    my $lPolicyRefMap = $aInSpInfo->policyRefs();
    foreach my $lDn (keys %{$lPolicyRefMap})
    {
        foreach my $lPolicyName (keys %{$lPolicyRefMap->{$lDn}})
        {
            my $lPolicyDn = $lPolicyRefMap->{$lDn}->{$lPolicyName};
            if (defined($lPolicyDn)  && (length $lPolicyDn > 0))
            {
                if (exists($lCreatedPolicyCfgFileMap->{$lPolicyDn}))
                {
                    my $lFileName = $lCreatedPolicyCfgFileMap->{$lPolicyDn};
                    my $lPolicyLink = getPolicyLink({ dn => $lPolicyDn, fname => $lFileName });

                    my $lRow = [];
                    push @{$lRow}, $lDn;
                    push @{$lRow}, $lPolicyName;
                    push @{$lRow},  $lPolicyLink;
                    push @{$lRows},  $lRow,
                }
            }
        }
    }

    my $lCfgTable = "";
    if (@{$lRows} > 0)
    {
        $lCfgTable = getHtmlTable({
            rows => $lRows,
            headings => [ "Referencing DN", "Policy Attribute", "Policy Config" ],
        });
    }


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n";

    if (length($lCfgTable) > 0)
    {
        print $aInFh "<h4>Referenced Policies</h4>";
        print $aInFh "\n";
        print $aInFh "These are the policies referenced from the service profile.\n"; 
        print $aInFh "Follow the link in order to view the xml that can be used to create the\n";
        print $aInFh "corresponding policy.\n";
        print $aInFh $lCfgTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }
    else
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No referenced policies</b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



sub printConfigInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lRows = [];
    foreach my $lClass (sort keys %{$lPolicyCfgByClassMap})
    {
        foreach my $lDn (keys %{$lPolicyCfgByClassMap->{$lClass}})
        {
            my $lFileName = $lCreatedPolicyCfgFileMap->{$lDn};
            my $lPolicyLink = getPolicyLink({ dn => $lDn, fname => $lFileName });

            my $lRow = [];
            push @{$lRow}, $lClass;
            push @{$lRow}, $lPolicyLink;
            push @{$lRows}, $lRow; 
        }
    }


    my $lCfgTable = getHtmlTable({
        rows => $lRows,
        headings => [ "Class", "DN" ],
    });

    # Policy configs 
    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n";


    print $aInFh "\n";
    print $aInFh "<h4>Policy Configs</h4>";
    print $aInFh "\n";
    print $aInFh "Many of the UCSM policies are listed below.  Follow the link in order to view the xml that can be used to create the \n";
    print $aInFh "corresponding policy.\n";
    print $aInFh $lCfgTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



# 
# SP Summary  
#
sub printSpOverviewInfo
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    # 
    # SERVER SUMMARY INFORMATION
    #
    my $lRows = [];

    my $lElement = $aInSpInfo->spEl();

    my $lRow = [];
    push @{$lRow}, "DN";
    push @{$lRow}, $aInSpInfo->dn();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Type";
    push @{$lRow}, $aInSpInfo->type();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Found Physical Node";
    push @{$lRow}, ($aInSpInfo->foundPhys() ? "yes" : "no");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Template";
    push @{$lRow}, $lElement->getAttribute("srcTemplName");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Assignment State";
    push @{$lRow}, $aInSpInfo->assignState();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Association State";
    push @{$lRow}, $aInSpInfo->assocState();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Physical Node ";
    push @{$lRow}, $lElement->getAttribute("pnDn");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "User Label";
    push @{$lRow}, $lElement->getAttribute("usrLbl");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Description";
    push @{$lRow}, $lElement->getAttribute("descr");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Config Qual";
    push @{$lRow}, $lElement->getAttribute("configQualifier");
    push @{$lRows}, $lRow; 

    my $lSpSummaryTable = getHtmlTable(
    {
        rows => $lRows,
    });

    $lRows = [];
    my $lPolicyFileMap = $aInSpInfo->policyCfgFiles();
    foreach my $lAdminName (keys %{$SP_POLICY_MAP})
    {
        if ($lAdminName !~ /^self$/)
        {
            my $lRow = [];
            push @{$lRow}, $SP_POLICY_MAP->{$lAdminName};
            push @{$lRow}, $lElement->getAttribute($lAdminName);

            my $lOperName = 'oper' . (ucfirst $lAdminName);
            my $lOperDn = $lElement->getAttribute($lOperName);

            my $lFileName = undef;
            if (exists $lPolicyFileMap->{$lOperDn})
            {
                $lFileName = $lPolicyFileMap->{$lOperDn};
            }
            my $lPolicyLink = getPolicyLink({ dn => $lOperDn, fname => $lFileName });

            push @{$lRow}, $lPolicyLink;
            push @{$lRows}, $lRow;
        }
    }

    my $lPolicyTable = getHtmlTable({
        rows => $lRows,
        headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
    });


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<h4>Summary </h4>%;
    print $aInFh "\n";
    print $aInFh $lSpSummaryTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    if (!$aInSpInfo->isInstance())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>Service profile : " . $aInSpInfo->dn() .  " is not an instance. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }
    elsif (!$aInSpInfo->foundPhys())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No physical hardware found for service profile : " . $aInSpInfo->dn() . "</b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%<h4>Server Policies</h4>%;
    print $aInFh "\n";
    print $aInFh $lPolicyTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



# 
# 
#
sub printSpNetworkInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lVnicTables = {};
    my $lVnicPolicyTables = {};
    my $lIfTables = {};


    if (exists $aInClassElMap->{'vnicEther'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicEther'}})
        {
            my $lRows = [];
            my $lDn = $lElement->getAttribute('dn');

            my $lRow = [];
            push @{$lRow}, "DN";
            push @{$lRow}, $lDn;
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Template";
            push @{$lRow}, $lElement->getAttribute("nwTemplName");
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Name";
            push @{$lRow}, $lElement->getAttribute('name');
            push @{$lRows}, $lRow; 
    
            $lRow = [];
            push @{$lRow}, "MAC Address";
            push @{$lRow}, $lElement->getAttribute('addr');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Fabric Id";
            push @{$lRow}, $lElement->getAttribute('switchId');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Owner";
            push @{$lRow}, $lElement->getAttribute('owner');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Type";
            push @{$lRow}, $lElement->getAttribute('type');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Equipment";
            push @{$lRow}, $lElement->getAttribute('equipmentDn');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Boot Device";
            push @{$lRow}, $lElement->getAttribute('bootDev');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "MTU";
            push @{$lRow}, $lElement->getAttribute('mtu');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Virutalization Preference";
            push @{$lRow}, $lElement->getAttribute('virtualizationPreference');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Oper Speed";
            push @{$lRow}, $lElement->getAttribute('operSpeed');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "State";
            push @{$lRow}, $lElement->getAttribute('configState');
            push @{$lRows}, $lRow; 

            my $lVnicTable = getHtmlTable({
                rows => $lRows,
            });
    
            $lVnicTables->{$lDn} = $lVnicTable;

            $lRows = [];
            my $lPolicyFileMap = $aInSpInfo->policyCfgFiles();
            foreach my $lAdminName (keys %{$VNIC_ETHER_POLICY_MAP})
            {
                my $lRow = [];
                push @{$lRow}, $VNIC_ETHER_POLICY_MAP->{$lAdminName};
                push @{$lRow}, $lElement->getAttribute($lAdminName);
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperDn = $lElement->getAttribute($lOperName);
          
                my $lFileName = undef;
                if (exists $lPolicyFileMap->{$lOperDn})
                {
                    $lFileName = $lPolicyFileMap->{$lOperDn};
                }
                my $lPolicyLink = getPolicyLink({ dn => $lOperDn, fname => $lFileName });
   
                push @{$lRow}, $lPolicyLink;
                push @{$lRows}, $lRow;
            }

            my $lVnicPolicyTable = getHtmlTable({
                rows => $lRows,
                headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
            });

            $lVnicPolicyTables->{$lDn} =  $lVnicPolicyTable;

            my @lIfs =  $lElement->getElementsByTagName('vnicEtherIf');
            $lRows = [];
            foreach my $lIf (@lIfs)
            {
                my $lRow = [];
                push @{$lRow}, $lIf->getAttribute("dn");
                push @{$lRow}, $lIf->getAttribute("switchId");
                push @{$lRow}, $lIf->getAttribute("operVnetName");
                push @{$lRow}, $lIf->getAttribute("vnet");
                push @{$lRow}, $lIf->getAttribute("defaultNet");
                push @{$lRow}, $lIf->getAttribute("addr");
                push @{$lRows}, $lRow;
            }

            my $lIfTable = getHtmlTable({
                rows => $lRows,
                headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "Default Network", "MAC Address" ],
            });
            $lIfTables->{$lDn} = $lIfTable;
        }
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Ethernet vNICS</H4>%;

    print $aInFh "<p>\n";
    print $aInFh "Click on vNIC's dn to view details.\n";
    print $aInFh "</p>\n\n";

    print $aInFh "\n";
    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    foreach my $lDn (keys %{$lVnicTables})
    {
        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicPolicyTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lIfTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




sub getPolicyLink
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'fname'}))
    {
        confess "Missing mandator argument: fname";
    }
    my $aInFilename = $aInRefArgs->{'fname'};

    my $lAnchor = $aInDn;
    if (defined($aInFilename))
    {
        my ($lVolume, $lDir, $lFilename) = File::Spec->splitpath($aInFilename);
        my $lRelPath = 'cfg/' . $lFilename; 
        $lAnchor = '<a href="' . $lRelPath . '">' .  $aInDn . '</a>';
    }
    return $lAnchor;
}                



sub printSpStorageInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lVnicTables = {};
    my $lVnicPolicyTables = {};
    my $lIfTables = {};

    if (exists $aInClassElMap->{'vnicEther'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicFc'}})
        {
            my $lRows = [];
            my $lDn = $lElement->getAttribute('dn');

            my $lRow = [];
            push @{$lRow}, "DN";
            push @{$lRow}, $lDn;
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Name";
            push @{$lRow}, $lElement->getAttribute('name');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Template";
            push @{$lRow}, $lElement->getAttribute("nwTemplName");
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "WWN Address";
            push @{$lRow}, $lElement->getAttribute('addr');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Fabric Id";
            push @{$lRow}, $lElement->getAttribute('switchId');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Owner";
            push @{$lRow}, $lElement->getAttribute('owner');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Type";
            push @{$lRow}, $lElement->getAttribute('type');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Equipment";
            push @{$lRow}, $lElement->getAttribute('equipmentDn');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Boot Device";
            push @{$lRow}, $lElement->getAttribute('bootDev');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Oper Speed";
            push @{$lRow}, $lElement->getAttribute('operSpeed');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "State";
            push @{$lRow}, $lElement->getAttribute('configState');
            push @{$lRows}, $lRow; 

            my $lVnicTable = getHtmlTable({
                rows => $lRows,
            });

            $lVnicTables->{$lDn} = $lVnicTable;

            $lRows = [];
            foreach my $lAdminName (keys %{$VNIC_FC_POLICY_MAP})
            {
                my $lRow = [];
                push @{$lRow}, $VNIC_FC_POLICY_MAP->{$lAdminName};
                push @{$lRow}, $lElement->getAttribute($lAdminName);
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                push @{$lRow}, $lElement->getAttribute($lOperName);
                push @{$lRows}, $lRow;
            }

            my $lVnicPolicyTable = getHtmlTable({
                rows => $lRows,
                headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
            });

            $lVnicPolicyTables->{$lDn} =  $lVnicPolicyTable;

            my @lIfs =  $lElement->getElementsByTagName('vnicFcIf');
            $lRows = [];
            foreach my $lIf (@lIfs)
            {
                my $lRow = [];
                push @{$lRow}, $lIf->getAttribute("dn");
                push @{$lRow}, $lIf->getAttribute("switchId");
                push @{$lRow}, $lIf->getAttribute("operVnetName");
                push @{$lRow}, $lIf->getAttribute("vnet");
                push @{$lRow}, $lIf->getAttribute("initiator");
                push @{$lRows}, $lRow;
            }

            my $lIfTable = getHtmlTable({
                rows => $lRows,
                headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "Initiator" ],
            });
            $lIfTables->{$lDn} = $lIfTable;
        }
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Fiber Channel vNICs </H4>%;
    print $aInFh "\n";
    print $aInFh "<p>\n";
    print $aInFh "Click on vNIC's dn to view details.\n";
    print $aInFh "</p>\n\n";

    print $aInFh "\n\n";
    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    foreach my $lDn (keys %{$lVnicTables})
    {
        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicPolicyTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lIfTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printFirmwareInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lFwTable = "";
    my $lRows = [];
    if (exists $aInClassElMap->{'firmwareRunning'})
    {
        foreach my $lElement (@{$aInClassElMap->{'firmwareRunning'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("deployment");
            push @{$lRow}, $lElement->getAttribute("type");
            push @{$lRow}, $lElement->getAttribute("packageVersion");
            push @{$lRow}, $lElement->getAttribute("version");
            push @{$lRows}, $lRow;
        }

        $lFwTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Deployment Type Package Version / ],
        });
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lFwTable) > 0)
    {
        print $aInFh qq%<H4> Firmware </H4>%;
        print $aInFh "\n";
        print $aInFh $lFwTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}


sub printLanInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    foreach my $lElement (@{$aInClassElMap->{'networkElement'}})
    {
        my $lEtherPIoElArray = UcsSimple::DomUtil::getElementsOfClass(
        { node => $lElement, class => 'etherPIo', hier => 1} );

        foreach my $lEtherPIoEl (@{$lEtherPIoElArray})
        {
            my $lRow = [];
            push @{$lRow}, $lEtherPIoEl->getAttribute("dn");
            push @{$lRow}, $lEtherPIoEl->getAttribute("operSpeed");
            push @{$lRow}, $lEtherPIoEl->getAttribute("operState");
            push @{$lRow}, $lEtherPIoEl->getAttribute("mac");
            push @{$lRow}, $lEtherPIoEl->getAttribute("mode");
            push @{$lRows}, $lRow;
        }
    }

    my $lNePortTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Oper Speed", "Oper State",  "MAC",  "Mode" ],
    });


    $lRows = [];
    if (exists $aInDnElMap->{'fabric/lan'})
    {
        my $lLanCloud = $aInDnElMap->{'fabric/lan'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lLanCloud, class => 'fabricVlan', hier => 1});

        foreach my $lElement (@{$lClassElArray})
        {
            # Grab disjoint information - fabricEthVlanPortEp and fabricEthVlanPc children's dn
            my $lEpList = undef; 
            my $lEpElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lElement, class => 'fabricEthVlanPortEp', hier => 1});
            foreach my $lEp (@{$lEpElArray})
            {
                $lEpList .= $lEp->getAttribute("dn") . " ";
            }

            $lEpElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lElement, class => 'fabricEthVlanPortPc', hier => 1});
            foreach my $lEp (@{$lEpElArray})
            {
                $lEpList .= $lEp->getAttribute("dn") . " ";
            }

            if (!defined($lEpList))
            {
                $lEpList = "all";
            }

            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultNet");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRow}, $lEpList;
            push @{$lRows}, $lRow;
        }
    }

    my $lLcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Network", "Oper State", "Transport", "Uplink Ports" ],
    });

    $lRows = [];
    if (exists $aInDnElMap->{'fabric/eth-estc'})
    {
        my $lEstc = $aInDnElMap->{'fabric/eth-estc'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lEstc, class => 'fabricVlan', hier => 1});

        foreach my $lElement (@{$lClassElArray})
        {
            # Grab disjoint information - fabricEthVlanPortEp and fabricEthVlanPc children's dn
            my $lEpList = undef; 
            my $lEpElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lElement, class => 'fabricEthVlanPortEp', hier => 1});
            foreach my $lEp (@{$lEpElArray})
            {
                $lEpList .= $lEp->getAttribute("dn") . " ";
            }

            $lEpElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lElement, class => 'fabricEthVlanPortPc', hier => 1});
            foreach my $lEp (@{$lEpElArray})
            {
                $lEpList .= $lEp->getAttribute("dn") . " ";
            }

            if (!defined($lEpList))
            {
                $lEpList = "all";
            }
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultNet");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRow}, $lEpList;
            push @{$lRows}, $lRow;
        }
    }

    my $lEstcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Network", "Oper State", "Transport", "Uplink Ports" ],
    });


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> NE Ports </H4>%;
    print $aInFh "\n";
    print $aInFh $lNePortTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> LAN </H4>%;
    print $aInFh "\n";
    print $aInFh $lLcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> ESTC</H4>%;
    print $aInFh "\n";
    print $aInFh $lEstcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}


sub printSanInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    foreach my $lElement (@{$aInClassElMap->{'networkElement'}})
    {
        my $lEtherPIoElArray = UcsSimple::DomUtil::getElementsOfClass(
        { node => $lElement, class => 'etherPIo', hier => 1});
        foreach my $lEtherPIoEl (@{$lEtherPIoElArray})
        {
            my $lRow = [];
            push @{$lRow}, $lEtherPIoEl->getAttribute("dn");
            push @{$lRow}, $lEtherPIoEl->getAttribute("operSpeed");
            push @{$lRow}, $lEtherPIoEl->getAttribute("operState");
            push @{$lRow}, $lEtherPIoEl->getAttribute("mac");
            push @{$lRow}, $lEtherPIoEl->getAttribute("mode");
            push @{$lRows}, $lRow;
        }
    }

    my $lNePortTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Oper Speed", "Oper State",  "MAC",  "Mode" ],
    });


    $lRows = [];
    if (exists $aInDnElMap->{'fabric/san'})
    {
        my $lLanCloud = $aInDnElMap->{'fabric/san'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lLanCloud, class => 'fabricVsan', hier => 1});

        foreach my $lElement (@{$aInClassElMap->{'fabricVsan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultZoning");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRows}, $lRow;
        }
    }

    my $lSanTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Zoning", "Oper State", "Transport" ],
    });

    $lRows = [];
    if (exists $aInDnElMap->{'fabric/eth-estc'})
    {
        my $lEstc = $aInDnElMap->{'fabric/eth-estc'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lEstc, class => 'fabricVsan', hier => 1});

        foreach my $lElement (@{$lClassElArray})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultZoning");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRows}, $lRow;
        }
    }

    my $lEstcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Zoning", "Oper State", "Transport" ],
    });


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> NE Ports </H4>%;
    print $aInFh "\n";
    print $aInFh $lNePortTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> SAN </H4>%;
    print $aInFh "\n";
    print $aInFh $lSanTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> ESTC</H4>%;
    print $aInFh "\n";
    print $aInFh $lEstcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printAboutInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lAboutText = getAboutText();

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> About </H4>%;
    print $aInFh "\n";
    print $aInFh $lAboutText;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printMacInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];


    #
    # macpoolAddr
    #
    $lRows = [];
    my $lMacTable = "";
    if (exists $aInClassElMap->{'macpoolAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'macpoolAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("assigned");
            push @{$lRow}, $lElement->getAttribute("owner");
            push @{$lRow}, $lElement->getAttribute("assignedToDn");
            push @{$lRows}, $lRow;
        }
        $lMacTable = getHtmlTable({
            rows => $lRows,
            headings => [ "MAC",  "Assigned", "Owner", "Assigned To"],
        });
    }


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lMacTable) > 0)
    {
        print $aInFh qq%<H4> MACs </H4>%;
        print $aInFh "\n";
        print $aInFh $lMacTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }
    else 
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No MACs in universe. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printWwnInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];

    #
    # fcpoolAddr
    #
    my $lFcTable = "";
    if (exists $aInClassElMap->{'fcpoolAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'fcpoolAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("assigned");
            push @{$lRow}, $lElement->getAttribute("owner");
            push @{$lRow}, $lElement->getAttribute("assignedToDn");
            push @{$lRows}, $lRow;
        }
        $lFcTable = getHtmlTable({
            rows => $lRows,
            headings => [ "WWN",  "Assigned", "Owner", "Assigned To"],
        });
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lFcTable) > 0)
    {
        print $aInFh qq%<H4> WWNs </H4>%;
        print $aInFh "\n";
        print $aInFh $lFcTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }
    else 
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No WWNs in universe. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printUuidInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    #
    # uuidpoolAddr
    #
    my $lRows = [];
    my $lUuidTable = "";
    if (exists $aInClassElMap->{'uuidpoolAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'uuidpoolAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("assigned");
            push @{$lRow}, $lElement->getAttribute("owner");
            push @{$lRow}, $lElement->getAttribute("assignedToDn");
            push @{$lRows}, $lRow;
        }

        $lUuidTable = getHtmlTable({
            rows => $lRows,
            headings => [ "UUID",  "Assigned", "Owner", "Assigned To" ],
        });
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lUuidTable) > 0)
    {
        print $aInFh qq%<H4> UUIDs </H4>%;
        print $aInFh "\n";
        print $aInFh $lUuidTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }
    else 
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No UUIDs in universe. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printIpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    my $lIpTable = "";
    if (exists $aInClassElMap->{'ippoolAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'ippoolAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("assigned");
            push @{$lRow}, $lElement->getAttribute("owner");
            push @{$lRow}, $lElement->getAttribute("assignedToDn");
            push @{$lRows}, $lRow;
        }

        $lIpTable = getHtmlTable({
            rows => $lRows,
            headings => [ "IP",  "Assigned", "Owner", "Assigned To" ],
        });
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lIpTable) > 0)
    {
        print $aInFh qq%<H4> Management IPs</H4>%;
        print $aInFh "\n";
        print $aInFh $lIpTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }
    else 
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No IPs in universe. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}





sub printIqnInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    my $lIqnTable = "";
    if (exists $aInClassElMap->{'iqnpoolAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'iqnpoolAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("assigned");
            push @{$lRow}, $lElement->getAttribute("owner");
            push @{$lRow}, $lElement->getAttribute("assignedToDn");
            push @{$lRows}, $lRow;
        }

        $lIqnTable = getHtmlTable({
            rows => $lRows,
            headings => [ "IP",  "Assigned", "Owner", "Assigned To" ],
        });
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";


    if (length($lIqnTable) > 0)
    {
        print $aInFh qq%<H4> IQNs </H4>%;
        print $aInFh "\n";
        print $aInFh $lIqnTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }
    else 
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No IQNs in universe. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



sub printSpIdentityInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    #
    # UUID  
    #
    my $lRows = [];
    my $lPhysClass = $aInSpInfo->physClass();
    my $lUuidTable = "";
    if (defined($lPhysClass) && (exists $aInClassElMap->{$lPhysClass}))
    {
        foreach my $lElement (@{$aInClassElMap->{$lPhysClass}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("uuid");
            push @{$lRows}, $lRow;
        }

        $lUuidTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Address" ],
        });
     }


     $lRows = [];
     my $lMacTable = "";
     if (exists $aInClassElMap->{'vnicEtherIf'})
     {
         foreach my $lElement (@{$aInClassElMap->{'vnicEtherIf'}})
         {
             my $lRow = [];
             push @{$lRow}, $lElement->getAttribute("dn");
             push @{$lRow}, $lElement->getAttribute("addr");
             push @{$lRows}, $lRow;
        }

        $lMacTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Address"],
        });
    }


    my $lWwpnTable = "";
    $lRows = [];
    if (exists $aInClassElMap->{'vnicFcIf'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicFcIf'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("initiator");
            push @{$lRows}, $lRow;
        }

        $lWwpnTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN",  "Address"],
        });
    }

    $lRows = [];
    my $lWwnTable = "";
    if (exists $aInClassElMap->{'vnicFcNode'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicFcNode'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }

        $lWwnTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN",  "Address"],
        });
    }

    $lRows = [];
    if (exists $aInClassElMap->{'vnicIP4VPooledAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicIP4VPooledAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }
    }

    if (exists $aInClassElMap->{'vnicIP4StaticAddr'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicIP4VStaticAddr'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("addr");
            push @{$lRows}, $lRow;
        }
    }

    my $lIpTable = "";
    if (@{$lRows} > 0)
    {
        $lIpTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN",  "Address" ],
        });
    }
    

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lUuidTable) > 0)
    {
        print $aInFh qq%<H4> UUIDs</H4>%;
        print $aInFh "\n";
        print $aInFh $lUuidTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lMacTable) > 0)
    {
        print $aInFh qq%<H4> MAC </H4>%;
        print $aInFh "\n";
        print $aInFh $lMacTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lWwpnTable) > 0)
    {
        print $aInFh qq%<H4> World Wide Port Name </H4>%;
        print $aInFh "\n";
        print $aInFh $lWwpnTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lWwnTable) > 0)
    {
        print $aInFh qq%<H4> World Wide Node Name </H4>%;
        print $aInFh "\n";
        print $aInFh $lWwnTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lIpTable) > 0)
    {
        print $aInFh qq%<H4> Management IP </H4>%;
        print $aInFh "\n";
        print $aInFh $lIpTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



sub printHardwareInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lNeTable = "";
    my $lNetworkElementTable = "";
    my $lChassisTable = "";
    my $lComputeBoardTable = "";
    my $lProcessorUnitTable = "";
    my $lMemoryUnitTable = "";
    my $lAdaptorUnitTable = "";
    my $lStorageControllerTable = "";
    my $lPhysTable = "";
    my $lPsuTable = "";
    my $lFanModuleTable = "";
    my $lFanTable = "";


    #
    # NETWORK ELEMENT
    #
    my $lRows = [];
    if (exists $aInClassElMap->{'networkElement'})
    {
        foreach my $lElement (@{$aInClassElMap->{'networkElement'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lNeTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Operability / ],
        });
   }

    #
    # CHASSIS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentChassis'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentChassis'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRows}, $lRow;
        }

        $lChassisTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision OperState / ],
        });
    }


    #
    # PSU
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentPsu'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentPsu'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lPsuTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability" ],
        });
    }

    #
    # FAN MODULE
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentFanModule'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentFanModule'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lFanModuleTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability" ],
        });
    }

    #
    # FAN 
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentFan'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentFan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRow}, $lElement->getAttribute("intType");
            push @{$lRows}, $lRow;
        }

        $lFanTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability", "Type" ],
        });
    }

    #
    # COMPUTE BLADE
    #
    $lRows = [];
    if (exists $aInClassElMap->{'computeBlade'})
    {
        foreach my $lElement (@{$aInClassElMap->{'computeBlade'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operPower");
            push @{$lRows}, $lRow;
        }
    }


    #
    # RACK UNITS
    #
    if (exists $aInClassElMap->{'computeRackUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'computeRackUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operPower");
            push @{$lRows}, $lRow;
        }
    }

    if (@{$lRows} > 0)
    {
        $lPhysTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision OperState  OperPower/ ],
        });
   }

    #
    # COMPUTE BOARDS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'computeBoard'})
    {
        foreach my $lElement (@{$aInClassElMap->{'computeBoard'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("thermal");
            push @{$lRow}, $lElement->getAttribute("voltage");
            push @{$lRows}, $lRow;
        }

        $lComputeBoardTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Thermal  Voltage/ ],
        });
    }

    #
    # ADAPTER UNITS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'adaptorUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'adaptorUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("partNumber");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("connPath");
            push @{$lRow}, $lElement->getAttribute("connStatus");
            push @{$lRows}, $lRow;
        }

        $lAdaptorUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Part Presence ConnPath ConnStatus / ],
        });
    }

    #
    # STORAGE CONTROLLER 
    #
    $lRows = [];
    if (exists $aInClassElMap->{'storageController'})
    {
        foreach my $lElement (@{$aInClassElMap->{'storageController'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("hwRevision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lStorageControllerTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability" ],
        });
    }

    #
    # MEMORY UNITS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'memoryUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'memoryUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("location");
            push @{$lRow}, $lElement->getAttribute("capacity");
            push @{$lRow}, $lElement->getAttribute("clock");
            push @{$lRows}, $lRow;
        }

        $lMemoryUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Presence Location Capacity Clock / ],
        });
    }


    #
    # PROCESSOR UNITS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'processorUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'processorUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("cores");
            push @{$lRow}, $lElement->getAttribute("speed");
            push @{$lRow}, $lElement->getAttribute("stepping");
            push @{$lRow}, $lElement->getAttribute("socketDesignation");
            push @{$lRow}, $lElement->getAttribute("coresEnabled");
            push @{$lRows}, $lRow;
        }

        $lProcessorUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Presence", "Cores", "Speed", "Stepping", "Socket Designation", "Cores Enabled" ],
        });
    }


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lNeTable) > 0)
    {
        print $aInFh qq%<H4> Network Elements</H4>%;
        print $aInFh "\n";
        print $aInFh $lNeTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lChassisTable) > 0)
    {
        print $aInFh qq%<H4> Chasssis </H4>%;
        print $aInFh "\n";
        print $aInFh $lChassisTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lPhysTable) > 0)
    {
        print $aInFh qq%<H4> Compute </H4>%;
        print $aInFh "\n";
        print $aInFh $lPhysTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lComputeBoardTable) > 0)
    {
        print $aInFh qq%<H4> Compute Boards </H4>%;
        print $aInFh "\n";
        print $aInFh $lComputeBoardTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lProcessorUnitTable) > 0)
    {
        print $aInFh qq%<H4> Processor Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lProcessorUnitTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lMemoryUnitTable) > 0)
    {
        print $aInFh qq%<H4> Memory Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lMemoryUnitTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lAdaptorUnitTable) > 0)
    {
        print $aInFh qq%<H4> Adaptor Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lAdaptorUnitTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lStorageControllerTable) > 0)
    {
        print $aInFh qq%<H4> Storage Controllers</H4>%;
        print $aInFh "\n";
        print $aInFh $lStorageControllerTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lPsuTable) > 0)
    {
        print $aInFh qq%<H4> Power Supply Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lPsuTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lFanModuleTable) > 0)
    {
        print $aInFh qq%<H4> Fan Modules </H4>%;
        print $aInFh "\n";
        print $aInFh $lFanModuleTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lFanTable ) > 0)
    {
        print $aInFh qq%<H4> Fans </H4>%;
        print $aInFh "\n";
        print $aInFh $lFanTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printFaultInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lAllFaults = [];
    foreach my $lFault (@{$aInClassElMap->{'faultInst'}})
    {
        my $lRow = [];
        my $lCode = $lFault->getAttribute("code");
        push @{$lRow}, $lFault->getAttribute("dn");
        push @{$lRow}, $lCode;
        push @{$lRow}, $lFault->getAttribute("rule");
        push @{$lRow}, $lFault->getAttribute("severity");
        push @{$lRow}, $lFault->getAttribute("id");
        push @{$lRow}, $lFault->getAttribute("lastTransition");
        push @{$lRow}, $lFault->getAttribute("descr");
        push @{$lAllFaults}, $lRow;
    }

    my $lFaultSummaryTable = getHtmlTable({
        rows => $lAllFaults,
        headings => [ qw / DN Code Rule Severity ID LastTransition Description / ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Faults </H4>%;
    print $aInFh "\n\n";
    print $aInFh $lFaultSummaryTable;
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



sub printQueryInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};


    my $lQueryTable = "";
    my $lRows = [];

    my $lRow = [];
    push @{$lRow}, "Service Profile";
    my $lInfo = "<ul>\n";
    $lInfo .= "<li> Query lsServer for logical and computeBlade/computePhysical for physical hardware.\n";
    $lInfo .= "<li> The pnDn attribute of lsServer contains the dn of the physical hardware.\n";
    $lInfo .= "<li> The vnicEther and vnicEtherIf contain service profile vnic configuration.\n";
    $lInfo .= "<li> The vnicFc and vnicFcIf contain service profile vhba configuration.\n";
    $lInfo .= "<li> The uuid is taken from the uuid attribute of the computePhysical (computeBlade or computeRackUnit).\n";
    $lInfo .= "<li> The mac address is taken from the addr attribute of the vnicEtherIf.\n"; 
    $lInfo .= "<li> The wwpn is taken from the initiator attribute of the vnicFcIf.\n"; 
    $lInfo .= "<li> The wwn is taken from the addr attribute of the vnicFcNode.\n";
    $lInfo .= "<li> IP information is taken from the classes vnicIP4VPooledAddr and vnicIP4StaticAddr.\n";
    $lInfo = "</ul>";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "UUIDs";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> UUIDs are of class uuidpoolAddr.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "MACs";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> UUIDs are of class macpoolAddr.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "WWNs";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> WWNs are of class fcpoolAddr.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "IPs";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> IPs are of class ippoolAddr.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "IQNs";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> IQNs are of class iqnpoolAddr.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "Faults";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> Faults are of class faultInst.\n";
    $lInfo .= "<li> Use scope queries to find faults in a containment hierarchy.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "Firmware";
    $lInfo = "<ul>\n";
    $lInfo .= "<li> Firmware is of class firmwareRunning.\n";
    $lInfo .= "<li> Use scope queries to find the firmware within a containment hierarchy.\n";
    $lInfo .= "</ul>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;

    $lRow = [];
    push @{$lRow}, "Hardware";
    $lInfo = "There are many classes of hardware, including:\n";
    $lInfo .= "<ul>\n";
    $lInfo .= "<li> networkElement\n";
    $lInfo .= "<li> equipmentChassis\n";
    $lInfo .= "<li> equipmentPsu,\n";
    $lInfo .= "<li> equipmentFanModule\n";
    $lInfo .= "<li> computeBoard\n";
    $lInfo .= "<li> storageController\n";
    $lInfo .= "<li> memoryUnit\n";
    $lInfo .= "<li> storageUnit\n";
    $lInfo .= "<li> computeBlade\n";
    $lInfo .= "<li>computeRackUnit\n";
    $lInfo .= "<li>adaptor\n";
    $lInfo .= "</li>\n";
    push @{$lRow}, $lInfo;
    push @{$lRows}, $lRow;


    $lQueryTable = getHtmlTable({
        rows => $lRows,
        headings => [ "Policy", "Query Details"],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Query Information </H4>%;
    print $aInFh "\n\n";
    print $aInFh "Below are some details of what queries were used to create this report:\n";

    print $aInFh $lQueryTable;

    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




# Print a table
# rows - ref to array of maps.  One map for each row with property name as key.
# headings - (parallel) reference to array property headings.
# fieldWidths - (optional) ref to a map indexed by property name with values the width of the field.
sub getHtmlTable
{
    my ($aInRefArgs) = @_;

    my $lTable = '<table id="poltable" cellspacing="0">' . "\n";

    if (!exists($aInRefArgs->{'rows'}))
    {
        confess "Missing mandator argument: rows";
    }
    my $aInRows = $aInRefArgs->{'rows'};

    my $aInHeadings = undef;
    if (exists($aInRefArgs->{'headings'}))
    {
        $aInHeadings = $aInRefArgs->{'headings'};
    }

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    if (defined($aInHeadings))
    {
        $lTable .= UcsSimple::Util::getIndent($aInIndent) . '<tr>';
        for my $lCol (0..(@{$aInHeadings} -1))
        {
	    $lTable .= UcsSimple::Util::getIndent($aInIndent + 2) . qq%<th scope="col"> $aInHeadings->[$lCol] </th>% . "\n";
        }
        $lTable .= UcsSimple::Util::getIndent($aInIndent) . '</tr>' . "\n";
    }

    # Print out table row by row
    my $lRowNum = 0;
    foreach my $lRow (@{$aInRows})
    {
        if (defined($aInHeadings) && (@{$lRow} != (@{$aInHeadings})))
        {
            confess "Number of columns not equal to number of headings";
        }

        $lTable .= UcsSimple::Util::getIndent($aInIndent+2) . '<tr>' . "\n";
        for my $lCol (0..(@{$lRow} -1))
        {
	        $lTable .=  UcsSimple::Util::getIndent($aInIndent+2) . qq%<td> $lRow->[$lCol] </td>% . "\n";
	        # print UcsSimple::Util::getIndent($aInIndent+2) . qq%<td> $lRow->[$lCol] </td>% . "\n";
	        if ((!(exists $lRow->[$lCol])) || (!defined($lRow->[$lCol])))
                {
                    confess "Fix me!";
                    exit 1;
                }
        }
        $lTable .= UcsSimple::Util::getIndent($aInIndent+1) . '</tr>' . "\n";
        $lRowNum++;
    }
    $lTable .=  UcsSimple::Util::getIndent($aInIndent+1) . '</table>'  . "\n";
    return $lTable;
}



{
    package AppConfig;
    use UcsSimple::Util;
    use Carp qw(croak cluck confess);
    use Log::Log4perl qw (get_logger);

    use Class::MethodMaker
        [ 
            scalar => [ qw/ backupHome backupDir cfgDir spDns logCfgFile schemaFile cssDir / ],
        ];

    sub new 
    {
        my ($aInClass, $aInRefArgs) = @_;
        my $self = {};
        bless $self, $aInClass;

        $self->spDns();

        foreach my $lName ( qw/ backupHome backupDir cfgDir spDns logCfgFile schemaFile cssDir /)
        {
            if (exists $aInRefArgs->{$lName})
            {
                $self->$lName($aInRefArgs->{$lName});
            }
        }
        return $self;
    }
}


sub loadConfig
{
    my ($aInRefArgs) = @_;
    my $lAppCfg = AppConfig->new();

    if (!exists($aInRefArgs->{'configFile'}))
    {
        confess "Missing mandator argument: configFile";
    }
    my $aInCfgFile = $aInRefArgs->{'configFile'};

    my $lConfig = undef;
    read_config($aInCfgFile => $lConfig);

    my $lLogCfgFile = $lConfig->{'APP'}->{'LOG4PERL'}; 
    if (defined($lLogCfgFile))
    {
        $lAppCfg->logCfgFile($lLogCfgFile); 
    }

    my $lSchemaFile = $lConfig->{'APP'}->{'SCHEMA'}; 
    if (!defined($lSchemaFile))
    {
    	die "Missing mandatory schema file";
    }
    $lAppCfg->schemaFile($lSchemaFile); 

    my $lCssDir = $lConfig->{'APP'}->{'CSS_DIR'}; 
    if (!defined($lCssDir)) 
    {
    	die "Missing mandatory css dir";
    }
    $lAppCfg->cssDir($lCssDir); 

    my $lBackupHome = $lConfig->{'APP'}->{'BACKUP_HOME'}; 
    if (!defined($lBackupHome))
    {
    	die "Missing mandatory backup directory";
    }
    my $lHome = File::Spec->canonpath( $lBackupHome ) ;
    $lAppCfg->backupHome($lHome); 

    return $lAppCfg;
}


{
    package SpInfo;
    use Carp qw(croak cluck confess);

    use Class::MethodMaker
        [
            scalar => [ qw/ dn assignState assocState type isInstance pooled poolName poolDn foundPhys spEl physEl pnDn physClass filename policyRefs policyCfgFiles / ],
        ];

    sub new 
    {
        my ($aInClass, $aInRefArgs) = @_;
        my $self = {};
        bless $self, $aInClass;
        
        # Set our class element map to an empty map ref;
        $self->isInstance(0);
        $self->foundPhys(0);
        $self->type("");
        $self->{spClassElements} = {};
        $self->{physClassElements} = {};

        $self->{allClassElements} = {};
        $self->policyRefs({});
        $self->policyCfgFiles({});

        if (!(exists $aInRefArgs->{'dn'}))
        {
            confess "Missing mandatory argument: dn";
        }

        foreach my $lName ( qw/ dn assignState assocState type isInstance pooled poolName poolDn foundPhys spEl physEl pnDn physClass physClassElements spClassElements policyRefs policyCfgFiles / )
        {
            if (exists $aInRefArgs->{$lName})
            {
                $self->$lName($aInRefArgs->{$lName});
            }
        }

        # Set filename based on dn;
        my $lFname = $self->dn();
        $lFname  =~ s/[^A-Za-z0-9\-\.]/_/g;
        $self->filename($lFname);

        $self->updateElements();
        return $self;
    }


    sub spClassElements
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";

        if (defined($aInClassElMap))
        {
            $self->{'spClassElements'} = $aInClassElMap;
            $self->updateElements(); 
        }
        return $self->{'spClassElements'};
    }


    sub physClassElements
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";

        if (defined($aInClassElMap))
        {
            $self->{'physClassElements'} = $aInClassElMap;
            $self->updateElements(); 
        }
        return $self->{'physClassElements'};
    }


    sub allClassElements
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";
        return $self->{'allClassElements'};
    }

    sub getElementsOfClass
    {
        my ($self, $aInClass) = @_;
        ref ($self) or confess "Instance required";

        my $lResult = {};        
        my $lAllClassElements = $self->{'allClassElements'};
        if (exists $lAllClassElements->{$aInClass})
        {
            return $lAllClassElements->{$aInClass};
        }
        return [];
    }

    sub updateElements 
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";

        my $lAllClassElementMap = {};
        my $lPhysElements = $self->physClassElements();
        foreach my $lClass (keys %{$lPhysElements})
        {
            if (!exists $lAllClassElementMap->{$lClass}) 
            {
                $lAllClassElementMap->{$lClass} = [];
            }
            foreach my $lElement (@{$lPhysElements->{$lClass}})
            {
                push @{$lAllClassElementMap->{$lClass}}, $lElement;
            }
        }

        my $lSpElements = $self->spClassElements();
        foreach my $lClass (keys %{$lSpElements})
        {
            if (!exists $lAllClassElementMap->{$lClass}) 
            {
                $lAllClassElementMap->{$lClass} = [];
            }
            foreach my $lElement (@{$lSpElements->{$lClass}})
            {
                push @{$lAllClassElementMap->{$lClass}}, $lElement;
            }
        }
        $self->{'allClassElements'} = $lAllClassElementMap;

        my $lFaultCount = 0;
        my $lFaults = [];
        if (exists $lAllClassElementMap->{'faultInst'})
        {
            foreach my $lFault (@{$lAllClassElementMap->{"faultInst"}})
            {
                push @{$lFaults}, $lFault;
                $lFaultCount++; 
            }
        }
    }


}



# Print usage message.
sub usage
{
    print "For usage information:\n";
    print "\n\tperldoc ucs-snapshot-report\n\n";
    exit;
}

__END__


=head1 NAME

ucs-snapshot-report - Produce a report detailing UCS domain information and service profile configuration from a UCS MIT snapshot.
                      This report may be useful for disaster recovery scenario's as it contains configuration and operational data 
                      on the service profiles.


=head1 USAGE

ucs-snapshot-report [options]

     ucs-snapshot-report --cfg=./cfg/report.cfg --xml=./snapshot/ucs-snapshot-2013-07-30-22_36_43.xml


=head1 CONFIGURATION FILE CONTENTS

    #
    # Configuration settings for the UCS Snapshort report application ucs-snapshot-report.
    #
    [APP]
    SCHEMA = /home/ucsdev/ucs-snapshot/schema/UCSM-IN.xsd
    CSS_DIR = /home/ucsdev/ucs-snapshot/assets
    BACKUP_HOME = /ucsdev/ikent/ucs-snapshot/snapshots


head1 SEE ALSO

L<LOG4PERL> for log4perl configuration file.
L<UcsSimple::Util>

=head1 AUTHOR

Ike Kent, C<< <ikent at cisco.com> >>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc ucs-snapshot-report

You can also look for information at:

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Ike Kent.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut


