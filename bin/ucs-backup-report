#!/usr/bin/perl

use strict;
use warnings;

use XML::LibXML;
use Getopt::Long;
use Carp qw(croak cluck confess);
use Log::Log4perl qw (get_logger);
use Data::Dumper;
use Config::Std;
use File::Spec;
use Slurp;

use UcsSimple::Session;
use UcsSimple::CommMgr;
use UcsSimple::XmlUtil;
use UcsSimple::DomUtil;
use UcsSimple::SchemaParser;

use constant ELEMENT_NODE => 1;
use constant MAX_FAILURES => 10;
use constant SLEEP_TIME => 600;

my $lFailures = 0;
my $lCookie = undef;
my $lCfgFile = undef;
my $lXmlFile = undef;

my $lSpInfoMap = {};
my $lCreatedPolicyCfgFileMap = {};

# Policy references from a service profile
my $SP_POLICY_MAP = {
    "self" => "Self",
    "biosProfileName" => "Bios Profile",
    "bootPolicyName" => "Boot Policy",
    "dynamicConPolicyName" => "Dynamic Connection Policy",
    "hostFwPolicyName" => "Host F/W Policy",
    "mgmtFwPolicyName" => "Mgmt F/W Policy",
    "powerPolicyName" => "Power Policy",
    "scrubPolicyName" => "Scrub Policy",
    "statsPolicyName" => "Stats Policy",
    "vconProfileName" => "Vcon Profile",
    "localDiskPolicyName" => "Local Disk Policy",
    "maintPolicyName" => "Maintenance Policy",
    "mgmtAccessPolicyName" => "Mgmt Access Policy",
    "solPolicyName" => "SOL Policy",
    "srcTemplName" => "Source Template"
};

my $VNIC_ETHER_POLICY_MAP = {
    "adaptorProfileName" => "Adapter Profile",
    "nwCtrlPolicyName" => "Network Control Policy",
    "qosPolicyName" => "QOS Policy",
    "statsPolicyName" => "Stats Policy",
    "nwTemplName" => "Template"
};

my $VNIC_FC_POLICY_MAP = {
    "adaptorProfileName" => "Adapter Profile",
    "qosPolicyName" => "QOS Policy",
    "statsPolicyName" => "Stats Policy",
    "nwTemplName" => "Template",
};


# Specify the command line options and process the command line
my $options_okay = GetOptions (
    'cfg=s'   =>  \$lCfgFile,      # A config file with application settings
    'xml=s'   =>  \$lXmlFile,      

    # Standard meta-options
    'usage'			=> sub { usage(); },
    'help'			=> sub { usage(); },
);

usage() if ((!$options_okay) || (!defined($lCfgFile))  || (!defined($lXmlFile)));

# Load our application specific settings
my $lAppCfg = loadConfig({configFile => $lCfgFile});

# Initialize logging
initLogging($lAppCfg->logCfgFile());

# Load class meta from schema
my $lSchemaParser = UcsSimple::SchemaParser->new({schema => $lAppCfg->schemaFile});
my $lClassMeta = $lSchemaParser->getClassMeta();
$lClassMeta->applyTypicalUcsMods();

# Create directory structure for our report
initReport();

my $lXmlParser = XML::LibXML->new();
my $lXmlDoc = $lXmlParser->parse_file($lXmlFile);
UcsSimple::DomUtil::populateDn($lXmlDoc, 1);

# Keep indexed maps of all our DOM elements
my $lClassElMap = UcsSimple::DomUtil::getElementsByClass($lXmlDoc);
my $lDnElMap = UcsSimple::DomUtil::getElementByDn($lXmlDoc);


# Get the logical SP info
$lSpInfoMap = organizeSpInfo({ classElMap => $lClassElMap, dnElMap => $lDnElMap });


printDomainInfo({ spInfoMap => $lSpInfoMap, dnElMap => $lDnElMap, classElMap => $lClassElMap });

foreach my $lSpDn (keys %{$lSpInfoMap})
{
    my $lSpInfo = $lSpInfoMap->{$lSpDn};
    resolveRefPolicies({ spInfo => $lSpInfo, classMeta => $lClassMeta, dnElMap => $lDnElMap });

    printSpInfo({ spInfo => $lSpInfo, dn => $lSpDn });
}

exit 0;

sub initLogging
{
    my ($aInLogCfgFile) = @_;

    if (defined($aInLogCfgFile))
    {
        Log::Log4perl::init_and_watch($aInLogCfgFile, 5);
        get_logger(__PACKAGE__)->debug(
            "Log configuration file: $aInLogCfgFile");
    }
    else
    {
        my $lConf = q(
            log4perl.category = DEBUG, Logfile
            log4perl.appender.Logfile          = Log::Log4perl::Appender::File
            log4perl.appender.Logfile.filename = debug.log
            log4perl.appender.Logfile.layout = Log::Log4perl::Layout::PatternLayout
            log4perl.appender.Logfile.layout.ConversionPattern = [%p][%d][%F:%L] %m%n
            log4perl.appender.Logfile.mode     = write
            log4perl.appender.Logfile.main     = DEBUG
        );
        Log::Log4perl::init(\$lConf);
        get_logger(__PACKAGE__)->debug(
            "No log configuration file -using reasonable defaults");
    }
}




# Initialize report structure
sub initReport
{
    # Create report directory 
    if (!(-d $lAppCfg->backupHome()))
    {
        die "Backup home directory does not exist";
    }

    my $lDateTime = UcsSimple::Util::getDate();
    my $lModDateTime = $lDateTime;
    $lModDateTime  =~ s/:/_/g;

    my $lBackupDir = File::Spec->catfile( $lAppCfg->backupHome(), $lModDateTime );
    $lAppCfg->startTime($lDateTime);
    $lAppCfg->backupDir($lBackupDir);
    mkdir $lBackupDir or die "Could not create backup directory ($lBackupDir) $!";

    my $lCfgDir = File::Spec->catfile( $lAppCfg->backupDir(), "cfg");
    $lAppCfg->cfgDir($lCfgDir);
    mkdir $lCfgDir or die "Could not create config directory ($lCfgDir) $!";
}




sub printAppCfg
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'appCfg'}))
    {
        confess "Missing mandator argument: appCfg";
    }
    my $aInAppCfg = $aInRefArgs->{'appCfg'};

    print "\n";
    print "URI           : " . $aInAppCfg->uri()  . "\n";
   
    my $lRows = [];
    foreach my $lDn (@{$aInAppCfg->spDns()})
    {
       push @{$lRows}, [$lDn];
    }

    UcsSimple::Util::printTable(
    {
        rows => $lRows,
        headings => ["Service Profiles"]
    });
    print "\n";

}

 


sub getDocHead
{

    my $lDocHead = <<'END_HEAD';
<!doctype html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>UCS Serivice Profile Backup </title>

       <!-- Include Styles -->
        <link rel="stylesheet" href="assets/themes/smoothness/jquery-ui.css" />		
        <link rel="stylesheet" href="assets/css/styles.css" />		
        <!--[if IE 7]><style type="text/css">#v-nav>ul>li.current{border-right:1px solid #fff!important}#v-nav>div.tab-content{z-index:-1!important;left:0}</style><![endif]-->
        <!--[if IE 8]><style type="text/css">#v-nav>ul>li.current{border-right:1px solid #fff!important}#v-nav>div.tab-content{z-index:-1!important;left:0}</style><![endif]-->
    </head>

    <body>

        <ul id="nav">
	    <li>
	        <a href="index.html" title="Home">Home</a>
            </li> 
	    <li> 
                <a href="https://developer.cisco.com" title="Cisco Developers Network">CDN</a>
            </li> 
            <li> 
                <a href="https://communities.cisco.com/community/technology/datacenter/ucs_management" title="Communities">Communities</a>
            </li> 
            <li> 
                <a href="index.html#tab10" title="About">About</a>
            </li> 
        </ul>

END_HEAD

    return $lDocHead;
}



sub getSpTabs
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};
    my $lTitle = '<h2 class="title">Service Profile: ' . $aInDn . '</h2>';
    my $lTabs = $lTitle . <<'END_HEAD';

            <div id="v-nav">

                <ul>
                    <li tab="tab1" class="first current">Overview</li>
                    <li tab="tab2">Summary</li>
                    <li tab="tab3">Identities</li>
                    <li tab="tab4">Network</li>
                    <li tab="tab5">Storage</li>
                    <li tab="tab6">Hardware</li>
                    <li tab="tab7">Firmware</li>
                    <li tab="tab8">Faults</li>
                    <li tab="tab9">Configs</li>
                </ul>

END_HEAD

    return $lTabs;
}



sub getNavTabs
{
    my $lTabs = <<'END_HEAD';
        <h2 class="title">UCS Service Profile Backup </h2>

            <div id="v-nav">

                <ul>
                    <li tab="tab1" class="first current">Domain</li>
                    <li tab="tab2"> Service Profiles</li>
                    <li tab="tab3"> Faults</li>
                    <li tab="tab4"> Hardware </li>
                    <li tab="tab5"> Firmware </li>
                    <li tab="tab6"> LAN </li>
                    <li tab="tab7"> SAN </li>
                    <li tab="tab8"> Identities </li>
                    <li tab="tab9"> Topology</li>
                    <li tab="tab10"> About </li>
                </ul>

END_HEAD

    return $lTabs;
}



sub getAboutText
{
    my $lText = <<'END_HEAD';

<p>
This application queries the entire UCSM MIT and stores it in an xml file.
It then parses this file to generate some html pages to view into its contents.  
Having the entire MIT archived is useful in a disaster recovery scenario since you 
have both the system state and its configuration state;  Of equal importance
is being able to extract the necessary information from the xml document and that is
why we generate html pages.  Please note, that we only extract a sub-set of the 
pertinent information as this software is provided for demonstration purposes only.  
You can redistribute it and/or modify it as you wish.
</p>

<h4>TODO </h4>

Some other interesting information to present would be:

<ul>
<li> network and storage templates;
<li> lan/san connectivity policies;
<li> show uplink, server, storage, and appliance ports;
<li> config for service profiles;
<li> list of organizations;
<li> VLAN permissions;
</ul>


<h4>Author</h4>
<p>
Written by Ike Kent. 
</p>


END_HEAD

    return $lText;
}


sub getDocTail
{

    my $lDocTail = <<'END_TAIL';

         </div>

        </section>

        <script type="text/javascript" src="assets/jquery/1.7.2/jquery.min.js"></script> 
        <script type="text/javascript" src="assets/jquery-ui/1.10.3/jquery-ui.js"></script> 
        <script type="text/javascript" src="assets/jquery-hashchange/jquery.ba-hashchange.js"></script>       
        <script type="text/javascript" src="assets/js/script.js"></script>

    </body>
</html>

END_TAIL

   return $lDocTail

}



sub printDomainInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    my $lIdxFileName = File::Spec->catfile( $lAppCfg->backupDir(), 'index.html');
    open my $lFh, '>', $lIdxFileName or die "Cannot open file $lIdxFileName $!";

    my $lHead = getDocHead();
    print $lFh $lHead;

    my $lTabs = getNavTabs();
    print $lFh $lTabs;

    printDomainOverview({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # LINKS TO SP's 
    #
    printSpNavList({ spInfoMap => $aInSpInfoMap, fhandle => $lFh });
 
    # 
    # ALL FAULT INFORMATION
    #
    printFaultInfo({ classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # H/W INFORMATION
    #
    printHardwareInfo({ classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # F/W INFORMATION
    #
    printFirmwareInfo({ classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # LAN INFO
    #
    printLanInfo({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # SAN INFO
    #
    printSanInfo({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # IDENTITY INFO
    #
    printIdentityInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # TOPOLOGY INFORMATION
    #
    printTopologyInfo ({ dnElMap => $lDnElMap, classElMap => $aInClassElMap, fhandle => $lFh });

    # 
    # ABOUT TEXT
    #
    printAboutInfo({ fhandle => $lFh });

    my $lTail = getDocTail();
    print $lFh $lTail; 

}



sub printDomainOverview
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lSummaryTable = "";
    my $lRows = [];
    foreach my $lTopSystem (@{$aInClassElMap->{'topSystem'}})
    {
        my $lRow = [];
        push @{$lRow}, "Name";
        push @{$lRow}, $lTopSystem->getAttribute('name');
        push @{$lRows}, $lRow;

    	$lRow = [];
        push @{$lRow}, "Address";
        push @{$lRow}, $lTopSystem->getAttribute('address');
        push @{$lRows}, $lRow;

    	$lRow = [];
        push @{$lRow}, "Mode";
        push @{$lRow}, $lTopSystem->getAttribute('mode');
        push @{$lRows}, $lRow;

    	$lRow = [];
        push @{$lRow}, "System Up Time";
        push @{$lRow}, $lTopSystem->getAttribute('systemUpTime');
        push @{$lRows}, $lRow;

    	$lRow = [];
        my $lReportTime = $lAppCfg->startTime(); 
        push @{$lRow}, "Report Time";
        push @{$lRow}, $lReportTime;
        push @{$lRows}, $lRow;
    }

    $lSummaryTable = getHtmlTable({
        rows => $lRows,
    });


    my $lMgmtTable = "";
    $lRows = [];
    foreach my $lMgmtEntity (@{$aInClassElMap->{'mgmtEntity'}})
    {
        my $lRow = [];
        push @{$lRow}, $lMgmtEntity->getAttribute("dn");
        push @{$lRow}, $lMgmtEntity->getAttribute("haReady");
        push @{$lRow}, $lMgmtEntity->getAttribute("haReadiness");
        push @{$lRow}, $lMgmtEntity->getAttribute("id");
        push @{$lRow}, $lMgmtEntity->getAttribute("mgmtServicesState");
        push @{$lRow}, $lMgmtEntity->getAttribute("problems");
        push @{$lRows}, $lRow;
    }

    $lMgmtTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN", "H/A Ready", "H/A Readiness", "ID", "Mgmt Services State", "Problems"],
    });

    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lSummaryTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lMgmtTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




sub printSpNavList
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfoMap'}))
    {
        confess "Missing mandator argument: spInfoMap";
    }
    my $aInSpInfoMap = $aInRefArgs->{'spInfoMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = []; 
    my $lHeadings  = [ "Service Profile", "Type", "Physical Node" ];
    foreach my $lSpDn (keys %{$aInSpInfoMap})
    {
        my $lSpInfo = $aInSpInfoMap->{$lSpDn};
        my $lSpFileName = $lSpInfo->filename() . '.html';

        my $lRow = [];
        my $lSpLink .= qq%<a href="$lSpFileName"> $lSpDn </a>%;
        push @{$lRow}, $lSpLink;

        push @{$lRow}, $lSpInfo->type();

        my $lPnDn = $lSpInfo->pnDn();
        push @{$lRow}, defined($lPnDn) ? $lPnDn : "none";

        push @{$lRows}, $lRow;
    }

    my $lSpTable = getHtmlTable({
        rows => $lRows,
        headings => $lHeadings,
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh $lSpTable;
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printSpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    my $lFileName = File::Spec->catfile( $lAppCfg->backupDir(), ($aInSpInfo->filename() . '.html') );
    open my $lFh, '>', $lFileName or die "Cannot open file $lFileName $!";

    my $lHead = getDocHead();
    print $lFh $lHead;

    my $lTabs = getSpTabs({dn => $aInDn});
    print $lFh $lTabs;

    my $lAllClassElMap = $aInSpInfo->allClassElements();

    # print "\n\n" . Dumper($lAllClassElMap) . "\n";

    # 
    # GEN INFO
    # 
    printOverviewInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # SP SUMMARY
    # 
    printSpSummaryInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    # 
    # IDENTITY
    #
    printSpIdentityInfo({ spInfo => $aInSpInfo, classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # NETWORK INFORMATION
    #
    printSpNetworkInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # STORAGE INFORMATION
    #
    printSpStorageInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # H/W INFORMATION
    #
    printHardwareInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # F/W INFORMATION
    #
    printFirmwareInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });

    # 
    # FAULT INFORMATION
    #
    printFaultInfo({ classElMap => $lAllClassElMap, fhandle => $lFh });


    # 
    # POLICY CONFIG INFORMATION
    #
    printConfigInfo({ spInfo => $aInSpInfo, fhandle => $lFh });

    my $lTail = getDocTail();
    print $lFh $lTail; 
}



# Combine maps of arrays 
sub addElMap
{
    my ($aInElMapOne, $aInElMapTwo) =  @_;

    foreach my $lKey (keys %{$aInElMapTwo})
    {
        if (exists $aInElMapOne->{$lKey})
        {
            $aInElMapOne->{$lKey} = \(@{$aInElMapOne->{$lKey}}, @{$aInElMapTwo->{$lKey}});
        }
        else
        {
            $aInElMapOne->{$lKey} = $aInElMapTwo->{$lKey};
        }
    }

    return $aInElMapOne;
} 



sub organizeSpInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};
    my $lSpInfoMap = {};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    # Iterate over all service profiles
    foreach my $lsServer (@{$aInClassElMap->{'lsServer'}})
    {
        my $lDn = $lsServer->getAttribute('dn');

        # Organize results by class name (for printing out)
        my $lSpClassElMap = UcsSimple::DomUtil::getElementsByClass($lsServer);

        my $lType = $lsServer->getAttribute('type'),
        my $lIsInstance = 0;
        if ($lType =~ /instance/)
        {
            $lIsInstance = 1;
        }

        # Determine physical information
        my $lPnDn = $lsServer->getAttribute('pnDn');
        my $lFoundPhys = 0;
        my $lPhysClassElMap = {};
        my $lPhysClass = undef;
        my $lPhysEl = undef;
        if (length($lPnDn) <  1)
        {
            $lPnDn = undef;
        }
        else
        {
            $lPhysClass = getPhysClass($lPnDn);
            if (exists $aInDnElMap->{$lPnDn})
            {
                $lPhysEl = $aInDnElMap->{$lPnDn};

                # Organize results by class name (for later processing)
                $lPhysClassElMap = UcsSimple::DomUtil::getElementsByClass($lPhysEl);
                $lFoundPhys = 1;
            }
        }

        my $lSpInfo = SpInfo->new({
            'dn' => $lsServer->getAttribute('dn'),
            'spEl' => $lsServer, 
            'physEl' => $lPhysEl,
            'pnDn' => $lPnDn,
            'foundPhys' => $lFoundPhys,
            'physClass' => $lPhysClass,
            'assignState' => $lsServer->getAttribute('assignState'),
            'assocState' => $lsServer->getAttribute('assocState'),
            'type' => $lType,
            'isInstance' => $lIsInstance,
            'spClassElements' => $lSpClassElMap,
            'physClassElements' => $lPhysClassElMap,
        });

        # Pool information from lsReq
        my @lsReqs =  $lsServer->getElementsByTagName('lsRequirement');
        foreach my $lsReq (@lsReqs)          
        {
            my $lPoolDn = $lsReq->getAttribute('pnPoolDn');
            my $lPoolName = $lsReq->getAttribute('name');
            if ((length $lPoolDn) > 0)
            {
                $lSpInfo->poolName($lPoolName);
                $lSpInfo->pooled(1);
                $lSpInfo->poolDn($lPoolDn);
            }
        }

        $lSpInfoMap->{$lDn} = $lSpInfo;
        determineReferences ({spInfo  => $lSpInfo });
    }
    return $lSpInfoMap;
}



sub getPhysClass
{
    my ($aInPnDn) = @_;
    my $lPhysClass = undef;

    if (defined($aInPnDn))
    {
        if ($aInPnDn =~ /blade/)
        {
            $lPhysClass = "computeBlade";
        }
        elsif ($aInPnDn =~ /rack/)
        {
            $lPhysClass = "computeRackUnit";
        }
    }
}



sub determineReferences 
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    my $lSpDn = $aInSpInfo->dn();
    my $lSpEl = $aInSpInfo->spEl();

    confess "SP Element not defined" if (!defined($lSpEl));
    confess "SP Element not defined" if (!defined($lSpDn));

    my $lSpClassElMap = $aInSpInfo->spClassElements();

    # 
    # Determine all the references to policies in the SP 
    # 
    my $lPolicyRefMap = $aInSpInfo->policyRefs();
    if (!exists($lPolicyRefMap->{$lSpDn}))
    {
        $lPolicyRefMap->{$lSpDn} = {};
    }

    foreach my $lAdminName (keys %{$SP_POLICY_MAP})
    {
        if ($lAdminName =~ /^self$/)
        {
            $lPolicyRefMap->{$lSpDn}->{'self'} = $lSpDn;
        }
        else
        {
            my $lOperName = 'oper' . (ucfirst $lAdminName);
            my $lOperPolicyDn = $lSpEl->getAttribute($lOperName);
            $lPolicyRefMap->{$lSpDn}->{$lAdminName} = $lOperPolicyDn;
        }
    }


    # 
    # Determine all the references to policies in the vnics
    #
    if (exists $lSpClassElMap->{'vnicEther'})
    {
        foreach my $lElement (@{$lSpClassElMap->{'vnicEther'}})
        {
            my $lDn = $lElement->getAttribute("dn");
            if (!exists($lPolicyRefMap->{$lDn}))
            {
                $lPolicyRefMap->{$lDn} = {};
            }
            foreach my $lAdminName (keys %{$VNIC_ETHER_POLICY_MAP})
            {
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperPolicyDn = $lElement->getAttribute($lOperName);
                $lPolicyRefMap->{$lDn}->{$lAdminName} = $lOperPolicyDn;
            }
        }
    }


    # 
    # Determine all the references to policies in the vhbas
    # 
    if (exists $lSpClassElMap->{'vnicFc'})
    {
        foreach my $lElement (@{$lSpClassElMap->{'vnicFc'}})
        {
            my $lDn = $lElement->getAttribute("dn");
            if (!exists($lPolicyRefMap->{$lDn}))
            {
                $lPolicyRefMap->{$lDn} = {};
            }
            foreach my $lAdminName (keys %{$VNIC_FC_POLICY_MAP})
            {
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                my $lOperPolicyDn = $lElement->getAttribute($lOperName);
                $lPolicyRefMap->{$lDn}->{$lAdminName} = $lOperPolicyDn;
            }
        }
    }
}



sub resolveRefPolicies
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'classMeta'}))
    {
        confess "Missing mandator argument: classMeta";
    }
    my $aInClassMeta = $aInRefArgs->{'classMeta'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    my $lSpDn = $aInSpInfo->dn();

    # 
    # Determine all the references to policies in the SP 
    # 
    my $lPolicyRefMap = $aInSpInfo->policyRefs();
    my $lPolicyDnMap = {};
    foreach my $lDn (keys %{$lPolicyRefMap})
    {
        foreach my $lPolicyName (keys %{$lPolicyRefMap->{$lDn}})
        {
            my $lPolicyDn = $lPolicyRefMap->{$lDn}->{$lPolicyName};
            if (defined($lPolicyDn)  && (length $lPolicyDn > 0))
            {
                $lPolicyDnMap->{$lPolicyDn} = 1;
            }
        }
    }

    if ((keys %{$lPolicyDnMap}) > 0)
    {
        my $lPolicyFileMap = {};
        foreach my $lDn (keys %{$lPolicyDnMap})
        {
            if (exists $aInDnElMap->{$lDn})
            {
                my $lCfgFile = getPolicyCfgFile({dn=>$lDn});
                $lPolicyFileMap->{$lDn} = $lCfgFile;
                createPolicyCfgFile({dn=>$lDn, cfgFile => $lCfgFile, dnElMap=>$aInDnElMap, classMeta=> $aInClassMeta });
            }
            $aInSpInfo->policyCfgFiles($lPolicyFileMap);
        }
    }
}



sub createPolicyCfgFile
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    if (!exists($aInRefArgs->{'classMeta'}))
    {
        confess "Missing mandator argument: classMeta";
    }
    my $aInClassMeta = $aInRefArgs->{'classMeta'};

    if (!exists($aInRefArgs->{'cfgFile'}))
    {
        confess "Missing mandator argument: cfgFile";
    }
    my $aInCfgFile = $aInRefArgs->{'cfgFile'};

    if ((!exists $lCreatedPolicyCfgFileMap->{$aInDn}) &&
        (exists $aInDnElMap->{$aInDn}))
    {
        # Create file with configConfMo for the policy 
        my $lPolicyElement = $aInDnElMap->{$aInDn};
        my $lCfgDoc = UcsSimple::DomUtil::getConfigConfMo({doc=>$lPolicyElement, classMeta=>$aInClassMeta});
        open my $lFh, '>', $aInCfgFile or die "Cannot open file $aInCfgFile $!";
        my $lCfgXml = $lCfgDoc->toString(2); 
        print $lFh $lCfgXml;
        close $lFh;
        $lCreatedPolicyCfgFileMap->{$aInDn} = $lCfgFile;
    }
}


sub getPolicyCfgFile
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'dn'}))
    {
        confess "Missing mandator argument: dn";
    }
    my $aInDn = $aInRefArgs->{'dn'};

    my $lFilename = $aInDn;
    $lFilename  =~ s/[^A-Za-z0-9\-\.]/_/g;
    $lFilename  .= '.xml';
    my $lCfgFile = File::Spec->catfile($lAppCfg->cfgDir(), $lFilename);

    return $lCfgFile;
}



sub printConfigInfo
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    # Policy configs 
    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n";
    print $aInFh "<h4>Policies</h4>";
    print $aInFh "\n";

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    my $lPolicyFileMap = $aInSpInfo->policyCfgFiles();
    foreach my $lDn (keys %{$lPolicyFileMap})
    {
        my $lCfgXml = slurp $lPolicyFileMap->{$lDn};

        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        my $lCfgHtml = UcsSimple::Util::xmlToHtml($lCfgXml);
        print $aInFh "\n\n";
        # print $aInFh q% <a id="$lDn"> %;
        # print $aInFh '<H4>' . $lDn . '</H4>';
        # print $aInFh qq%</a>%;
        # print $aInFh "\n\n";

        print $aInFh '<pre>';
        print $aInFh '<code>';
        print $aInFh "\n";
        print $aInFh $lCfgHtml;
        print $aInFh "\n";
        print $aInFh '</code>';
        print $aInFh '</pre>';
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



# 
# SP Summary  
#
sub printSpSummaryInfo
{
    my ($aInRefArgs) = @_;
    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    # 
    # SERVER SUMMARY INFORMATION
    #
    my $lRows = [];

    my $lElement = $aInSpInfo->spEl();

    my $lRow = [];
    push @{$lRow}, "DN";
    push @{$lRow}, $aInSpInfo->dn();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Type";
    push @{$lRow}, $aInSpInfo->type();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Template";
    push @{$lRow}, $lElement->getAttribute("srcTemplName");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Assignment State";
    push @{$lRow}, $aInSpInfo->assignState();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Association State";
    push @{$lRow}, $aInSpInfo->assocState();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Physical Node ";
    push @{$lRow}, $lElement->getAttribute("pnDn");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "User Label";
    push @{$lRow}, $lElement->getAttribute("usrLbl");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Description";
    push @{$lRow}, $lElement->getAttribute("descr");
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Config Qual";
    push @{$lRow}, $lElement->getAttribute("configQualifier");
    push @{$lRows}, $lRow; 

    my $lSpSummaryTable = getHtmlTable(
    {
        rows => $lRows,
    });

    $lRows = [];
    foreach my $lAdminName (keys %{$SP_POLICY_MAP})
    {
        if ($lAdminName !~ /^self$/)
        {
            my $lRow = [];
            push @{$lRow}, $SP_POLICY_MAP->{$lAdminName};
            push @{$lRow}, $lElement->getAttribute($lAdminName);

            my $lOperName = 'oper' . (ucfirst $lAdminName);
            push @{$lRow}, $lElement->getAttribute($lOperName);
            push @{$lRows}, $lRow;
        }
    }

    my $lSpPolicyTable = getHtmlTable({
        rows => $lRows,
        headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<h4>Summary </h4>%;
    print $aInFh "\n";
    print $aInFh $lSpSummaryTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Policies</H4>%;
    print $aInFh "\n";
    print $aInFh $lSpPolicyTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



# 
# 
#
sub printSpNetworkInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lVnicTables = {};
    my $lVnicPolicyTables = {};
    my $lIfTables = {};


    if (exists $aInClassElMap->{'vnicEther'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicEther'}})
        {
            my $lRows = [];
            my $lDn = $lElement->getAttribute('dn');

            my $lRow = [];
            push @{$lRow}, "DN";
            push @{$lRow}, $lDn;
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Template";
            push @{$lRow}, $lElement->getAttribute("nwTemplName");
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Name";
            push @{$lRow}, $lElement->getAttribute('name');
            push @{$lRows}, $lRow; 
    
            $lRow = [];
            push @{$lRow}, "MAC Address";
            push @{$lRow}, $lElement->getAttribute('addr');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Fabric Id";
            push @{$lRow}, $lElement->getAttribute('switchId');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Owner";
            push @{$lRow}, $lElement->getAttribute('owner');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Type";
            push @{$lRow}, $lElement->getAttribute('type');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Equipment";
            push @{$lRow}, $lElement->getAttribute('equipmentDn');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Boot Device";
            push @{$lRow}, $lElement->getAttribute('bootDev');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "MTU";
            push @{$lRow}, $lElement->getAttribute('mtu');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Virutalization Preference";
            push @{$lRow}, $lElement->getAttribute('virtualizationPreference');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Oper Speed";
            push @{$lRow}, $lElement->getAttribute('operSpeed');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "State";
            push @{$lRow}, $lElement->getAttribute('configState');
            push @{$lRows}, $lRow; 

            my $lVnicTable = getHtmlTable({
                rows => $lRows,
            });
    
            $lVnicTables->{$lDn} = $lVnicTable;

            $lRows = [];
            foreach my $lAdminName (keys %{$VNIC_ETHER_POLICY_MAP})
            {
                my $lRow = [];
                push @{$lRow}, $VNIC_ETHER_POLICY_MAP->{$lAdminName};
                push @{$lRow}, $lElement->getAttribute($lAdminName);
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                push @{$lRow}, $lElement->getAttribute($lOperName);
                push @{$lRows}, $lRow;
            }

            my $lVnicPolicyTable = getHtmlTable({
                rows => $lRows,
                headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
            });

            $lVnicPolicyTables->{$lDn} =  $lVnicPolicyTable;

            my @lIfs =  $lElement->getElementsByTagName('vnicEtherIf');
            $lRows = [];
            foreach my $lIf (@lIfs)
            {
                my $lRow = [];
                push @{$lRow}, $lIf->getAttribute("dn");
                push @{$lRow}, $lIf->getAttribute("switchId");
                push @{$lRow}, $lIf->getAttribute("operVnetName");
                push @{$lRow}, $lIf->getAttribute("vnet");
                push @{$lRow}, $lIf->getAttribute("defaultNet");
                push @{$lRow}, $lIf->getAttribute("addr");
                push @{$lRows}, $lRow;
            }

            my $lIfTable = getHtmlTable({
                rows => $lRows,
                headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "Default Network", "MAC Address" ],
            });
            $lIfTables->{$lDn} = $lIfTable;
        }
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Ethernet vNICS</H4>%;

    print $aInFh "<p>\n";
    print $aInFh "Click on vNIC's dn to view details.\n";
    print $aInFh "</p>\n\n";

    print $aInFh "\n";
    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    foreach my $lDn (keys %{$lVnicTables})
    {
        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicPolicyTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lIfTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




sub printSpStorageInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    my $lVnicTables = {};
    my $lVnicPolicyTables = {};
    my $lIfTables = {};

    if (exists $aInClassElMap->{'vnicEther'})
    {
        foreach my $lElement (@{$aInClassElMap->{'vnicFc'}})
        {
            my $lRows = [];
            my $lDn = $lElement->getAttribute('dn');

            my $lRow = [];
            push @{$lRow}, "DN";
            push @{$lRow}, $lDn;
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Name";
            push @{$lRow}, $lElement->getAttribute('name');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Template";
            push @{$lRow}, $lElement->getAttribute("nwTemplName");
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "WWN Address";
            push @{$lRow}, $lElement->getAttribute('addr');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Fabric Id";
            push @{$lRow}, $lElement->getAttribute('switchId');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Owner";
            push @{$lRow}, $lElement->getAttribute('owner');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Type";
            push @{$lRow}, $lElement->getAttribute('type');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Equipment";
            push @{$lRow}, $lElement->getAttribute('equipmentDn');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Boot Device";
            push @{$lRow}, $lElement->getAttribute('bootDev');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "Oper Speed";
            push @{$lRow}, $lElement->getAttribute('operSpeed');
            push @{$lRows}, $lRow; 

            $lRow = [];
            push @{$lRow}, "State";
            push @{$lRow}, $lElement->getAttribute('configState');
            push @{$lRows}, $lRow; 

            my $lVnicTable = getHtmlTable({
                rows => $lRows,
            });

            $lVnicTables->{$lDn} = $lVnicTable;

            $lRows = [];
            foreach my $lAdminName (keys %{$VNIC_FC_POLICY_MAP})
            {
                my $lRow = [];
                push @{$lRow}, $VNIC_FC_POLICY_MAP->{$lAdminName};
                push @{$lRow}, $lElement->getAttribute($lAdminName);
                my $lOperName = 'oper' . (ucfirst $lAdminName);
                push @{$lRow}, $lElement->getAttribute($lOperName);
                push @{$lRows}, $lRow;
            }

            my $lVnicPolicyTable = getHtmlTable({
                rows => $lRows,
                headings => [ "Policy Name", "Admin Policy", "Oper Policy" ],
            });

            $lVnicPolicyTables->{$lDn} =  $lVnicPolicyTable;

            my @lIfs =  $lElement->getElementsByTagName('vnicFcIf');
            $lRows = [];
            foreach my $lIf (@lIfs)
            {
                my $lRow = [];
                push @{$lRow}, $lIf->getAttribute("dn");
                push @{$lRow}, $lIf->getAttribute("switchId");
                push @{$lRow}, $lIf->getAttribute("operVnetName");
                push @{$lRow}, $lIf->getAttribute("vnet");
                push @{$lRow}, $lIf->getAttribute("initiator");
                push @{$lRows}, $lRow;
            }

            my $lIfTable = getHtmlTable({
                rows => $lRows,
                headings => [ "DN", "Switch", "Oper VNET", "Oper VLAN ID", "Initiator" ],
            });
            $lIfTables->{$lDn} = $lIfTable;
        }
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Fiber Channel vNICs </H4>%;
    print $aInFh "\n";
    print $aInFh "<p>\n";
    print $aInFh "Click on vNIC's dn to view details.\n";
    print $aInFh "</p>\n\n";

    print $aInFh "\n\n";
    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%<div class="accordion"> %;
    print $aInFh "\n\n";

    foreach my $lDn (keys %{$lVnicTables})
    {
        print $aInFh qq%<h3> $lDn </h3>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%<div> %;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lVnicPolicyTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh qq%$lIfTables->{$lDn}%;
        print $aInFh "\n\n";
        print $aInFh qq%</br>%;
        print $aInFh "\n\n";

        print $aInFh UcsSimple::Util::getIndent($aInIndent+1) . qq%</div> %;
        print $aInFh "\n\n";
    }

    print $aInFh UcsSimple::Util::getIndent($aInIndent) . qq%</div> %;
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printFirmwareInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lFwTable = "";
    my $lRows = [];
    if (exists $aInClassElMap->{'firmwareRunning'})
    {
        foreach my $lElement (@{$aInClassElMap->{'firmwareRunning'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("deployment");
            push @{$lRow}, $lElement->getAttribute("type");
            push @{$lRow}, $lElement->getAttribute("packageVersion");
            push @{$lRow}, $lElement->getAttribute("version");
            push @{$lRows}, $lRow;
        }

        $lFwTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Deployment Type Package Version / ],
        });
    }

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lFwTable) > 0)
    {
        print $aInFh qq%<H4> Firmware </H4>%;
        print $aInFh "\n";
        print $aInFh $lFwTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}


sub printLanInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    if (exists $aInDnElMap->{'fabric/lan'})
    {
        my $lLanCloud = $aInDnElMap->{'fabric/lan'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lLanCloud, class => 'fabricVlan', hier => 1});

        foreach my $lElement (@{$aInClassElMap->{'fabricVlan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultNet");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRows}, $lRow;
        }
    }

    my $lLcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Network", "Oper State", "Transport" ],
    });

    $lRows = [];
    if (exists $aInDnElMap->{'fabric/eth-estc'})
    {
        my $lEstc = $aInDnElMap->{'fabric/eth-estc'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lEstc, class => 'fabricVlan', hier => 1});

        foreach my $lElement (@{$aInClassElMap->{'fabricVlan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultNet");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRows}, $lRow;
        }
    }

    my $lEstcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Network", "Oper State", "Transport" ],
    });


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> LAN </H4>%;
    print $aInFh "\n";
    print $aInFh $lLcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> ESTC</H4>%;
    print $aInFh "\n";
    print $aInFh $lEstcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}


sub printSanInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'dnElMap'}))
    {
        confess "Missing mandator argument: dnElMap";
    }
    my $aInDnElMap = $aInRefArgs->{'dnElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    if (exists $aInDnElMap->{'fabric/san'})
    {
        my $lLanCloud = $aInDnElMap->{'fabric/san'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lLanCloud, class => 'fabricVsan', hier => 1});

        foreach my $lElement (@{$aInClassElMap->{'fabricVsan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultZoning");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRows}, $lRow;
        }
    }

    my $lSanTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Zoning", "Oper State", "Transport" ],
    });

    $lRows = [];
    if (exists $aInDnElMap->{'fabric/eth-estc'})
    {
        my $lEstc = $aInDnElMap->{'fabric/eth-estc'};

        my $lClassElArray = UcsSimple::DomUtil::getElementsOfClass(
            { node => $lEstc, class => 'fabricVsan', hier => 1});

        foreach my $lElement (@{$aInClassElMap->{'fabricVsan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("name");
            push @{$lRow}, $lElement->getAttribute("id");
            push @{$lRow}, $lElement->getAttribute("switchId");
            push @{$lRow}, $lElement->getAttribute("defaultZoning");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("transport");
            push @{$lRows}, $lRow;
        }
    }

    my $lEstcTable = getHtmlTable({
        rows => $lRows,
        headings => [ "DN",  "Name", "Id",  "Switch Id",  "Default Zoning", "Oper State", "Transport" ],
    });


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> SAN </H4>%;
    print $aInFh "\n";
    print $aInFh $lSanTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> ESTC</H4>%;
    print $aInFh "\n";
    print $aInFh $lEstcTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printAboutInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lAboutText = getAboutText();

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Firmware </H4>%;
    print $aInFh "\n";
    print $aInFh $lAboutText;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printIdentityInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];

        #
        # fcpoolAddr
        #
        if (exists $aInClassElMap->{'fcpoolAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'fcpoolAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, $lElement->getAttribute("id");
                push @{$lRow}, $lElement->getAttribute("assigned");
                push @{$lRow}, $lElement->getAttribute("owner");
                push @{$lRow}, $lElement->getAttribute("assignedToDn");
                push @{$lRows}, $lRow;
            }
        }
        my $lFcTable = getHtmlTable({
            rows => $lRows,
            headings => [ "WWN",  "Assigned", "Owner", "Assigned To"],
        });


        #
        # macpoolAddr
        #
        $lRows = [];
        if (exists $aInClassElMap->{'macpoolAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'macpoolAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, $lElement->getAttribute("id");
                push @{$lRow}, $lElement->getAttribute("assigned");
                push @{$lRow}, $lElement->getAttribute("owner");
                push @{$lRow}, $lElement->getAttribute("assignedToDn");
                push @{$lRows}, $lRow;
            }
        }
        my $lMacTable = getHtmlTable({
            rows => $lRows,
            headings => [ "MAC",  "Assigned", "Owner", "Assigned To"],
        });



        #
        # uuidpoolAddr
        #
        $lRows = [];
        if (exists $aInClassElMap->{'uuidpoolAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'uuidpoolAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, $lElement->getAttribute("id");
                push @{$lRow}, $lElement->getAttribute("assigned");
                push @{$lRow}, $lElement->getAttribute("owner");
                push @{$lRow}, $lElement->getAttribute("assignedToDn");
                push @{$lRows}, $lRow;
            }
        }

        my $lUuidTable = getHtmlTable({
            rows => $lRows,
            headings => [ "UUID",  "Assigned", "Owner", "Assigned To" ],
        });



        $lRows = [];
        if (exists $aInClassElMap->{'ippoolAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'ippoolAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, $lElement->getAttribute("id");
                push @{$lRow}, $lElement->getAttribute("assigned");
                push @{$lRow}, $lElement->getAttribute("owner");
                push @{$lRow}, $lElement->getAttribute("assignedToDn");
                push @{$lRows}, $lRow;
            }
        }

        my $lIpTable = getHtmlTable({
            rows => $lRows,
            headings => [ "IP",  "Assigned", "Owner", "Assigned To" ],
        });



        $lRows = [];
        if (exists $aInClassElMap->{'iqnpoolAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'iqnpoolAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, $lElement->getAttribute("name");
                push @{$lRow}, $lElement->getAttribute("assigned");
                push @{$lRow}, $lElement->getAttribute("owner");
                push @{$lRow}, $lElement->getAttribute("assignedToDn");
                push @{$lRows}, $lRow;
            }
        }

        my $lIqnTable = getHtmlTable({
            rows => $lRows,
            headings => [ "IP",  "Assigned", "Owner", "Assigned To" ],
        });


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> UUIDs </H4>%;
    print $aInFh "\n";
    print $aInFh $lUuidTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Macs </H4>%;
    print $aInFh "\n";
    print $aInFh $lMacTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> WWNs </H4>%;
    print $aInFh "\n";
    print $aInFh $lFcTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> IPs </H4>%;
    print $aInFh "\n";
    print $aInFh $lIpTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%<H4> IQNs </H4>%;
    print $aInFh "\n";
    print $aInFh $lIqnTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}


sub printSpIdentityInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lRows = [];
    {
        #
        # UUID  
        #
        my $lPhysClass = $aInSpInfo->physClass();
        if (exists $aInClassElMap->{'vnicEtherIf'})
        {
            foreach my $lElement (@{$aInClassElMap->{$lPhysClass}})
            {
                my $lRow = [];
                push @{$lRow}, "UUID";
                push @{$lRow}, $lElement->getAttribute("dn");
                push @{$lRow}, $lElement->getAttribute("uuid");
                push @{$lRows}, $lRow;
            }
        }

        if (exists $aInClassElMap->{'vnicEtherIf'})
        {
            foreach my $lElement (@{$aInClassElMap->{'vnicEtherIf'}})
            {
                my $lRow = [];
                push @{$lRow}, "MAC Address";
                push @{$lRow}, $lElement->getAttribute("dn");
                push @{$lRow}, $lElement->getAttribute("addr");
                push @{$lRows}, $lRow;
            }
        }

        if (exists $aInClassElMap->{'vnicFcNode'})
        {
            foreach my $lElement (@{$aInClassElMap->{'vnicFcNode'}})
            {
                my $lRow = [];
                push @{$lRow}, "World Wide Node Name";
                push @{$lRow}, $lElement->getAttribute("dn");
                push @{$lRow}, $lElement->getAttribute("addr");
                push @{$lRows}, $lRow;
            }
        }

        if (exists $aInClassElMap->{'vnicIP4VPooledAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'vnicIP4VPooledAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, "Management IP";
                push @{$lRow}, $lElement->getAttribute("dn");
                push @{$lRow}, $lElement->getAttribute("addr");
                push @{$lRows}, $lRow;
            }
        }

        if (exists $aInClassElMap->{'vnicIP4StaticAddr'})
        {
            foreach my $lElement (@{$aInClassElMap->{'vnicIP4VStaticAddr'}})
            {
                my $lRow = [];
                push @{$lRow}, "Management IP";
                push @{$lRow}, $lElement->getAttribute("dn");
                push @{$lRow}, $lElement->getAttribute("addr");
                push @{$lRows}, $lRow;
            }
        }
    }

    my $lIdSummaryTable = getHtmlTable({
        rows => $lRows,
        headings => [ qw / DN Type Address / ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh qq%<H4> Identities </H4>%;
    print $aInFh "\n";
    print $aInFh $lIdSummaryTable; 
    print $aInFh "</br>";
    print $aInFh "\n\n";

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



# 
# 
#
sub printHardwareInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};


    my $lNeTable = "";
    my $lNetworkElementTable = "";
    my $lChassisTable = "";
    my $lComputeBoardTable = "";
    my $lProcessorUnitTable = "";
    my $lMemoryUnitTable = "";
    my $lAdaptorUnitTable = "";
    my $lStorageControllerTable = "";
    my $lPhysTable = "";
    my $lPsuTable = "";
    my $lFanModuleTable = "";
    my $lFanTable = "";


    #
    # NETWORK ELEMENT
    #
    my $lRows = [];
    if (exists $aInClassElMap->{'networkElement'})
    {
        foreach my $lElement (@{$aInClassElMap->{'networkElement'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lNeTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Operability / ],
        });
   }

    #
    # CHASSIS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentChassis'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentChassis'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRows}, $lRow;
        }

        $lChassisTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision OperState / ],
        });
    }


    #
    # PSU
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentPsu'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentPsu'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lPsuTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability" ],
        });
    }

    #
    # FAN MODULE
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentFanModule'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentFanModule'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lFanModuleTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability" ],
        });
    }

    #
    # FAN 
    #
    $lRows = [];
    if (exists $aInClassElMap->{'equipmentFan'})
    {
        foreach my $lElement (@{$aInClassElMap->{'equipmentFan'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRow}, $lElement->getAttribute("intType");
            push @{$lRows}, $lRow;
        }

        $lFanTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability", "Type" ],
        });
    }

    #
    # COMPUTE BLADE
    #
    $lRows = [];
    if (exists $aInClassElMap->{'computeBlade'})
    {
        foreach my $lElement (@{$aInClassElMap->{'computeBlade'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operPower");
            push @{$lRows}, $lRow;
        }
    }


    #
    # RACK UNITS
    #
    if (exists $aInClassElMap->{'computeRackUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'computeRackUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operPower");
            push @{$lRows}, $lRow;
        }
    }

    if (@{$lRows} > 0)
    {
        $lPhysTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision OperState  OperPower/ ],
        });
   }

    #
    # COMPUTE BOARDS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'computeBoard'})
    {
        foreach my $lElement (@{$aInClassElMap->{'computeBoard'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("thermal");
            push @{$lRow}, $lElement->getAttribute("voltage");
            push @{$lRows}, $lRow;
        }

        $lComputeBoardTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Thermal  Voltage/ ],
        });
    }

    #
    # ADAPTER UNITS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'adaptorUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'adaptorUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("partNumber");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("connPath");
            push @{$lRow}, $lElement->getAttribute("connStatus");
            push @{$lRows}, $lRow;
        }

        $lAdaptorUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Part Presence ConnPath ConnStatus / ],
        });
    }

    #
    # STORAGE CONTROLLER 
    #
    $lRows = [];
    if (exists $aInClassElMap->{'storageController'})
    {
        foreach my $lElement (@{$aInClassElMap->{'storageController'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("hwRevision");
            push @{$lRow}, $lElement->getAttribute("operState");
            push @{$lRow}, $lElement->getAttribute("operability");
            push @{$lRows}, $lRow;
        }

        $lStorageControllerTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Oper State", "Operability" ],
        });
    }

    #
    # MEMORY UNITS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'memoryUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'memoryUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("location");
            push @{$lRow}, $lElement->getAttribute("capacity");
            push @{$lRow}, $lElement->getAttribute("clock");
            push @{$lRows}, $lRow;
        }

        $lMemoryUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ qw / DN Vendor Model Serial Revision Presence Location Capacity Clock / ],
        });
    }


    #
    # PROCESSOR UNITS
    #
    $lRows = [];
    if (exists $aInClassElMap->{'processorUnit'})
    {
        foreach my $lElement (@{$aInClassElMap->{'processorUnit'}})
        {
            my $lRow = [];
            push @{$lRow}, $lElement->getAttribute("dn");
            push @{$lRow}, $lElement->getAttribute("vendor");
            push @{$lRow}, $lElement->getAttribute("model");
            push @{$lRow}, $lElement->getAttribute("serial");
            push @{$lRow}, $lElement->getAttribute("revision");
            push @{$lRow}, $lElement->getAttribute("presence");
            push @{$lRow}, $lElement->getAttribute("cores");
            push @{$lRow}, $lElement->getAttribute("speed");
            push @{$lRow}, $lElement->getAttribute("stepping");
            push @{$lRow}, $lElement->getAttribute("socketDesignation");
            push @{$lRow}, $lElement->getAttribute("coresEnabled");
            push @{$lRows}, $lRow;
        }

        $lProcessorUnitTable = getHtmlTable({
            rows => $lRows,
            headings => [ "DN", "Vendor", "Model", "Serial", "Revision", "Presence", "Cores", "Speed", "Stepping", "Socket Designation", "Cores Enabled" ],
        });
    }


    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    if (length($lNeTable) > 0)
    {
        print $aInFh qq%<H4> Network Elements</H4>%;
        print $aInFh "\n";
        print $aInFh $lNeTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lChassisTable) > 0)
    {
        print $aInFh qq%<H4> Chasssis </H4>%;
        print $aInFh "\n";
        print $aInFh $lChassisTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lPhysTable) > 0)
    {
        print $aInFh qq%<H4> Compute </H4>%;
        print $aInFh "\n";
        print $aInFh $lPhysTable; 
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lComputeBoardTable) > 0)
    {
        print $aInFh qq%<H4> Compute Boards </H4>%;
        print $aInFh "\n";
        print $aInFh $lComputeBoardTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lProcessorUnitTable) > 0)
    {
        print $aInFh qq%<H4> Processor Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lProcessorUnitTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lMemoryUnitTable) > 0)
    {
        print $aInFh qq%<H4> Memory Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lMemoryUnitTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lAdaptorUnitTable) > 0)
    {
        print $aInFh qq%<H4> Adaptor Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lAdaptorUnitTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lStorageControllerTable) > 0)
    {
        print $aInFh qq%<H4> Storage Controllers</H4>%;
        print $aInFh "\n";
        print $aInFh $lStorageControllerTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lPsuTable) > 0)
    {
        print $aInFh qq%<H4> Power Supply Units </H4>%;
        print $aInFh "\n";
        print $aInFh $lPsuTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lFanModuleTable) > 0)
    {
        print $aInFh qq%<H4> Fan Modules </H4>%;
        print $aInFh "\n";
        print $aInFh $lFanModuleTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    if (length($lFanTable ) > 0)
    {
        print $aInFh qq%<H4> Fans </H4>%;
        print $aInFh "\n";
        print $aInFh $lFanTable;
        print $aInFh "</br>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printOverviewInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'spInfo'}))
    {
        confess "Missing mandator argument: spInfo";
    }
    my $aInSpInfo = $aInRefArgs->{'spInfo'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};


    my $lRows = [];

    my $lRow = [];
    push @{$lRow}, "DN";
    push @{$lRow}, $aInSpInfo->dn();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Type";
    push @{$lRow}, $aInSpInfo->type();
    push @{$lRows}, $lRow; 

    $lRow = [];
    push @{$lRow}, "Found Physical Node";
    push @{$lRow}, ($aInSpInfo->foundPhys() ? "yes" : "no");
    push @{$lRows}, $lRow; 

    my $lSummaryTable = getHtmlTable(
    {
        rows => $lRows,
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Overview </H4>%;
    print $aInFh "\n\n";
    print $aInFh $lSummaryTable;
    print $aInFh "</br>";
    print $aInFh "\n\n";

    if (!$aInSpInfo->isInstance())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>Service profile : " . $aInSpInfo->dn() .  " is not an instance. </b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }
    elsif (!$aInSpInfo->foundPhys())
    {
        print $aInFh "\n\n";
        print $aInFh "<p>";
        print $aInFh "<b>No physical hardware found for service profile : " . $aInSpInfo->dn() . "</b>";
        print $aInFh "</p>";
        print $aInFh "\n\n";
    }

    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}



sub printFaultInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'classElMap'}))
    {
        confess "Missing mandator argument: classElMap";
    }
    my $aInClassElMap = $aInRefArgs->{'classElMap'};

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    my $lAllFaults = [];
    foreach my $lFault (@{$aInClassElMap->{'faultInst'}})
    {
        my $lRow = [];
        my $lCode = $lFault->getAttribute("code");
        push @{$lRow}, $lFault->getAttribute("dn");
        push @{$lRow}, $lCode;
        push @{$lRow}, $lFault->getAttribute("rule");
        push @{$lRow}, $lFault->getAttribute("severity");
        push @{$lRow}, $lFault->getAttribute("id");
        push @{$lRow}, $lFault->getAttribute("lastTransition");
        push @{$lRow}, $lFault->getAttribute("descr");
        push @{$lAllFaults}, $lRow;
    }

    my $lFaultSummaryTable = getHtmlTable({
        rows => $lAllFaults,
        headings => [ qw / DN Code Rule Severity ID LastTransition Description / ],
    });

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Faults </H4>%;
    print $aInFh "\n\n";
    print $aInFh $lFaultSummaryTable;
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";

}



sub printTopologyInfo
{
    my ($aInRefArgs) = @_;

    if (!exists($aInRefArgs->{'fhandle'}))
    {
        confess "Missing mandator argument: fhandle";
    }
    my $aInFh = $aInRefArgs->{'fhandle'};

    print $aInFh "\n\n";
    print $aInFh qq%<div class="tab-content">%;
    print $aInFh "\n\n";

    print $aInFh "\n\n";
    print $aInFh qq%<H4> Topology </H4>%;
    print $aInFh "\n\n";
    print $aInFh "We could print a topology diagram here\n\n";
    print $aInFh "</br>";
    print $aInFh qq%</div>%;
    print $aInFh "\n\n";
}




# Print a table
# rows - ref to array of maps.  One map for each row with property name as key.
# headings - (parallel) reference to array property headings.
# fieldWidths - (optional) ref to a map indexed by property name with values the width of the field.
sub getHtmlTable
{
    my ($aInRefArgs) = @_;

    my $lTable = '<table id="poltable" cellspacing="0">' . "\n";

    if (!exists($aInRefArgs->{'rows'}))
    {
        confess "Missing mandator argument: rows";
    }
    my $aInRows = $aInRefArgs->{'rows'};

    my $aInHeadings = undef;
    if (exists($aInRefArgs->{'headings'}))
    {
        $aInHeadings = $aInRefArgs->{'headings'};
    }

    my $aInIndent = 0;
    if (exists($aInRefArgs->{'indent'}))
    {
        $aInIndent = $aInRefArgs->{'indent'};
    }

    if (defined($aInHeadings))
    {
        $lTable .= UcsSimple::Util::getIndent($aInIndent) . '<tr>';
        for my $lCol (0..(@{$aInHeadings} -1))
        {
	    $lTable .= UcsSimple::Util::getIndent($aInIndent + 2) . qq%<th scope="col"> $aInHeadings->[$lCol] </th>% . "\n";
        }
        $lTable .= UcsSimple::Util::getIndent($aInIndent) . '</tr>' . "\n";
    }

    # Print out table row by row
    my $lRowNum = 0;
    foreach my $lRow (@{$aInRows})
    {
        if (defined($aInHeadings) && (@{$lRow} != (@{$aInHeadings})))
        {
            confess "Number of columns not equal to number of headings";
        }

        $lTable .= UcsSimple::Util::getIndent($aInIndent+2) . '<tr>' . "\n";
        for my $lCol (0..(@{$lRow} -1))
        {
	        $lTable .=  UcsSimple::Util::getIndent($aInIndent+2) . qq%<td> $lRow->[$lCol] </td>% . "\n";
	        # print UcsSimple::Util::getIndent($aInIndent+2) . qq%<td> $lRow->[$lCol] </td>% . "\n";
	        if ((!(exists $lRow->[$lCol])) || (!defined($lRow->[$lCol])))
                {
                    confess "Fix me!";
                    exit 1;
                }
        }
        $lTable .= UcsSimple::Util::getIndent($aInIndent+1) . '</tr>' . "\n";
        $lRowNum++;
    }
    $lTable .=  UcsSimple::Util::getIndent($aInIndent+1) . '</table>'  . "\n";
    return $lTable;
}



{
    package AppConfig;
    use UcsSimple::Util;
    use Carp qw(croak cluck confess);
    use Log::Log4perl qw (get_logger);

    use Data::Dumper;
    use Class::MethodMaker
        [ 
            scalar => [ qw/ uri userName password backupHome backupDir cfgDir startTime spDns logCfgFile schemaFile / ],
        ];

    sub new 
    {
        my ($aInClass, $aInRefArgs) = @_;
        my $self = {};
        bless $self, $aInClass;

        $self->spDns();

        foreach my $lName ( qw/ uri userName password backupHome backupDir cfgDir startTime spDns logCfgFile schemaFile /)
        {
            if (exists $aInRefArgs->{$lName})
            {
                $self->$lName($aInRefArgs->{$lName});
            }
        }
        return $self;
    }
}


sub loadConfig
{
    my ($aInRefArgs) = @_;
    my $lAppCfg = AppConfig->new();

    if (!exists($aInRefArgs->{'configFile'}))
    {
        confess "Missing mandator argument: configFile";
    }
    my $aInCfgFile = $aInRefArgs->{'configFile'};

    my $lConfig = undef;
    read_config($aInCfgFile => $lConfig);

    my $lLogCfgFile = $lConfig->{'APP'}->{'LOG4PERL'}; 
    if (defined($lLogCfgFile))
    {
        $lAppCfg->logCfgFile($lLogCfgFile); 
    }

    my $lSchemaFile = $lConfig->{'APP'}->{'SCHEMA'}; 
    if (!defined($lSchemaFile))
    {
    	die "Missing mandatory schema file";
    }
    $lAppCfg->schemaFile($lSchemaFile); 

    my $lBackupHome = $lConfig->{'APP'}->{'BACKUP_HOME'}; 
    if (!defined($lBackupHome))
    {
    	die "Missing mandatory backup directory";
    }
    my $lHome = File::Spec->canonpath( $lBackupHome ) ;
    $lAppCfg->backupHome($lHome); 

    my $lUri = $lConfig->{'UCS'}->{'URI'}; 
    my $lUname = $lConfig->{'UCS'}->{'UNAME'}; 
    my $lPasswd = $lConfig->{'UCS'}->{'PASSWORD'};
    
    if ((!defined($lUri)) || (!defined($lUname)) || (!defined($lPasswd)))
    {
    	die "Missing necessary connection settings";
    }    
    $lAppCfg->uri($lUri);
    $lAppCfg->userName($lUname);
    $lAppCfg->password($lPasswd);

    return $lAppCfg;
}


{
    package SpInfo;
    use Carp qw(croak cluck confess);

    use Data::Dumper;
    use Class::MethodMaker
        [
            scalar => [ qw/ dn assignState assocState type isInstance pooled poolName poolDn foundPhys spEl physEl pnDn physClass filename policyRefs policyCfgFiles / ],
        ];

    sub new 
    {
        my ($aInClass, $aInRefArgs) = @_;
        my $self = {};
        bless $self, $aInClass;
        
        # Set our class element map to an empty map ref;
        $self->isInstance(0);
        $self->foundPhys(0);
        $self->type("");
        $self->{spClassElements} = {};
        $self->{physClassElements} = {};

        $self->{allClassElements} = {};
        $self->policyRefs({});
        $self->policyCfgFiles({});

        if (!(exists $aInRefArgs->{'dn'}))
        {
            confess "Missing mandatory argument: dn";
        }

        foreach my $lName ( qw/ dn assignState assocState type isInstance pooled poolName poolDn foundPhys spEl physEl pnDn physClass physClassElements spClassElements policyRefs policyCfgFiles / )
        {
            if (exists $aInRefArgs->{$lName})
            {
                $self->$lName($aInRefArgs->{$lName});
            }
        }

        # Set filename based on dn;
        my $lFname = $self->dn();
        $lFname  =~ s/[^A-Za-z0-9\-\.]/_/g;
        $self->filename($lFname);

        $self->updateElements();
        return $self;
    }


    sub spClassElements
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";

        if (defined($aInClassElMap))
        {
            $self->{'spClassElements'} = $aInClassElMap;
            $self->updateElements(); 
        }
        return $self->{'spClassElements'};
    }


    sub physClassElements
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";

        if (defined($aInClassElMap))
        {
            $self->{'physClassElements'} = $aInClassElMap;
            $self->updateElements(); 
        }
        return $self->{'physClassElements'};
    }


    sub allClassElements
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";
        return $self->{'allClassElements'};
    }

    sub getElementsOfClass
    {
        my ($self, $aInClass) = @_;
        ref ($self) or confess "Instance required";

        my $lResult = {};        
        my $lAllClassElements = $self->{'allClassElements'};
        if (exists $lAllClassElements->{$aInClass})
        {
            return $lAllClassElements->{$aInClass};
        }
        return [];
    }

    sub updateElements 
    {
        my ($self, $aInClassElMap) = @_;
        ref ($self) or confess "Instance required";

        my $lAllClassElementMap = {};
        my $lPhysElements = $self->physClassElements();
        foreach my $lClass (keys %{$lPhysElements})
        {
            if (!exists $lAllClassElementMap->{$lClass}) 
            {
                $lAllClassElementMap->{$lClass} = [];
            }
            foreach my $lElement (@{$lPhysElements->{$lClass}})
            {
                push @{$lAllClassElementMap->{$lClass}}, $lElement;
            }
        }

        my $lSpElements = $self->spClassElements();
        foreach my $lClass (keys %{$lSpElements})
        {
            if (!exists $lAllClassElementMap->{$lClass}) 
            {
                $lAllClassElementMap->{$lClass} = [];
            }
            foreach my $lElement (@{$lSpElements->{$lClass}})
            {
                push @{$lAllClassElementMap->{$lClass}}, $lElement;
            }
        }
        $self->{'allClassElements'} = $lAllClassElementMap;

        my $lFaultCount = 0;
        my $lFaults = [];
        if (exists $lAllClassElementMap->{'faultInst'})
        {
            foreach my $lFault (@{$lAllClassElementMap->{"faultInst"}})
            {
                push @{$lFaults}, $lFault;
                $lFaultCount++; 
            }
        }
    }


}



# Print usage message.
sub usage
{
    print "For usage information:\n";
    print "\n\tperldoc ucs-backup-report\n\n";
    exit;
}

__END__


=head1 NAME

ucs-backup-report - produce a report detailing service profile configuration from a UCS domain backop.
                   This report may be useful for disaster recovery scenario's as it contains configuration
                   and operational data on the service profiles.


=head1 USAGE

ucs-backup-report [options]

    ucs-backup-report --cfg=./cfg/demo.conf --xml=ucs-backup.xml

=head1 CONFIGURATION FILE CONTENTS

    [UCS]
    URI	= https://nikon-A/nuova
    UNAME = admin
    PASSWORD = Nbv12345

    [APP]

    LOG4PERL = /home/ikent/demo/cfg/log.cfg

    BACKUP_HOME = /home/ikent/backup

d1 SEE ALSO

L<LOG4PERL> for log4perl configuration file.
L<UcsSimple::EventUtil>
L<UcsSimple::Session>
L<UcsSimple::CommMgr>
L<UcsSimple::Util>
L<UcsSimple::XmlUtil>

=head1 AUTHOR

Ike Kent, C<< <ikent at cisco.com> >>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc event-reader

You can also look for information at:

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Ike Kent.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut

