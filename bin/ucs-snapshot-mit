#!/usr/bin/perl

use strict;
use warnings;

use Config::Std;
use Getopt::Long;
use Carp qw(croak cluck confess);
use Log::Log4perl qw (get_logger);

use UcsSimple::Session;
use UcsSimple::CommMgr;
use UcsSimple::XmlUtil;
use Data::Dumper;
use DateTime;

# Signal handler (assure 1 logout per login)
$SIG{'INT'} = \&sigIntHandler;
my $lCommMgr = undef;

my $lUname = "admin";
my $lUri = undef;
my $lPasswd = undef;
my $lDn= "";
my $lLogCfgFile = undef;
my $lCfgFile = undef;
my $lRetCode = 1;
my $lBackupHome = undef;
my $lMaxBackups = undef;
my $lPrefix = 'ucs-snapshot-';


# Specify the command line options and process the command line
my $options_okay = GetOptions (
        # Application specific options
	'uri=s' 	=> \$lUri,   	    # Server uri
	'uname=s'       => \$lUname,        # User name.
	'passwd=s'      => \$lPasswd,       # Password.
	'log4perl=s'    => \$lLogCfgFile,   # log4perl configuration file
	'cfg=s'         => \$lCfgFile,      # a cfg file with application settings.
        'backupHome'    => \$lBackupHome,   # Backup directory
        'maxBackups'    => \$lMaxBackups,   # Maximum backup files

	# Standard meta-options
	'usage'		=> sub { usage(); },
);

usage() if !$options_okay;

if (defined($lCfgFile))
{
    read_config $lCfgFile => my %lConfig;

    # Command line arguments take precendence.
    $lUri = $lConfig{'UCS'}{'URI'} if (!$lUri);
    $lUname = $lConfig{'UCS'}{'UNAME'} if (!$lUname);
    $lPasswd = $lConfig{'UCS'}{'PASSWORD'} if (!$lPasswd);
    $lLogCfgFile = $lConfig{'APP'}{'LOG4PERL'} if (!$lLogCfgFile);
    $lBackupHome = $lConfig{'APP'}{'BACKUP_HOME'} if (!$lBackupHome);
    $lMaxBackups = $lConfig{'APP'}{'MAX_BACKUP_FILES'} if (!$lMaxBackups);
}

usage() if ((!$lUname) || (!$lPasswd) || (!$lUri) || (!$lBackupHome) || ((!defined($lMaxBackups)) || ($lMaxBackups < 1)));

if (!((-d $lBackupHome) && (-w $lBackupHome)))
{
    croak "Backup directory does not exist or is not writeable: " . $lBackupHome . "\n";
}

initLogging($lLogCfgFile);

# Create session and communication manager
my $lSession = UcsSimple::Session->new(
    {userName => $lUname, password => $lPasswd, uri => $lUri });

$lCommMgr = UcsSimple::CommMgr->new(
    { session => $lSession, ssl_opts => {no_verify => 1} });

my $lCookie = $lCommMgr->doLogin();
croak "Failed to get cookie" if (!defined $lCookie);

my ($lSuccess, $lXmlResp, $lErrHashRef) = 
    $lCommMgr->resolveDn({ dn => $lDn, hier => 1 });

# Output the command to a log file
if ($lSuccess)
{
    cleanup({ dir => $lBackupHome, prefix => $lPrefix, maxFiles => $lMaxBackups });

    my $lDt = DateTime->now();
    my $lDtString = $lDt->strftime("%F-%H_%M_%S");
    my $lBackupFilename = $lPrefix . $lDtString . '.xml';
    my $lQualBackupFile = File::Spec->catfile( $lBackupHome, $lBackupFilename);
    open my $lFh, '>', $lQualBackupFile or die "Cannot open file $lQualBackupFile $!";
    print $lFh $lXmlResp; 
    close $lFh;
}

$lCommMgr->doLogout();

$lRetCode = $lSuccess ? 0 : 1;
exit $lRetCode;




# Remove old log files beyond a max
# cleanup({ dir => /home/joe/backup, prefix ="ucs-snapshot", maxFiles => 5 });
sub cleanup
{
    my ($aInRefArgs) = @_; 

    if (!exists($aInRefArgs->{'dir'}))
    {
        confess "Missing mandatory argument: dir";
    }  
    my $lDir = $aInRefArgs->{'dir'};

    if (!exists($aInRefArgs->{'prefix'}))
    {
        confess "Missing mandatory argument: prefix";
    }  
    my $lPrefix = $aInRefArgs->{'prefix'};

    my $lSuffix = '.xml';
    if (!exists($aInRefArgs->{'maxFiles'}))
    {
        confess "Missing mandatory argument: maxFiles";
    }  
    my $lMaxFiles = $aInRefArgs->{'maxFiles'};

    my $lGlob = File::Spec->catfile( $lDir, $lPrefix) . '*' . $lSuffix;

    my @lCurrentFiles = glob($lGlob);
    # Check if we need to delete a file
    if (@lCurrentFiles >= $lMaxFiles)
    {
        # Create a map indexed by a DateTime object for sorting.
        my $lTimeFileMap = {};
        foreach my $lFilename (@lCurrentFiles)
        {
            my $lDtString = $lFilename;
            my ($lYear, $lMonth, $lDay, $lHour, $lMin, $lSec) = 
                ($lDtString =~ m/(\d{4})-(\d{2})-(\d{2})-(\d{2})_(\d{2})_(\d{2})/);
            my $lDt = DateTime->new( year => $lYear, month => $lMonth, day => $lDay, 
                hour => $lHour, minute => $lMin, second => $lSec);
            $lTimeFileMap->{$lDt} = $lFilename;
        }

        my $lCount = 0;
        foreach my $lDt (reverse sort keys %{$lTimeFileMap})
        {
            $lCount++; 
            if ($lCount >= $lMaxFiles)
            {
                my $lFilename =  $lTimeFileMap->{$lDt};
                #print "Deleting: " . $lCount . ")" . $lFilename . "\n";
                unlink $lFilename or die "Could not delete file : $lFilename";
            }
        }
    }
}



# Print usage message.
sub usage 
{
    print "For usage information:\n";
    print "\n\tperldoc ucs-snapshot-mit\n\n";
    exit;
}



sub initLogging
{
    my ($aInLogCfgFile) = @_;

    if (defined($aInLogCfgFile))
    {
        Log::Log4perl::init_and_watch($aInLogCfgFile, 5);
        get_logger(__PACKAGE__)->debug(
            "Log configuration file: $aInLogCfgFile");
    }
    else
    {
        my $lConf = q(
            log4perl.category = DEBUG, Logfile
            log4perl.appender.Logfile          = Log::Log4perl::Appender::File
            log4perl.appender.Logfile.filename = debug.log
            log4perl.appender.Logfile.layout = Log::Log4perl::Layout::PatternLayout
            log4perl.appender.Logfile.layout.ConversionPattern = [%p][%d][%F:%L] %m%n
            log4perl.appender.Logfile.mode     = write
            log4perl.appender.Logfile.main     = DEBUG
        );
        Log::Log4perl::init(\$lConf);
        get_logger(__PACKAGE__)->debug(
            "No log configuration file -using reasonable defaults");
    }
}



sub sigIntHandler
{
    get_logger(__PACKAGE__)->warn(
         "Caught signal - cleaning up");

    print "Caught signal - will cleanup and exit \n";
    $lCommMgr->doLogout();

    get_logger(__PACKAGE__)->warn("Terminated by signal");

    print "Terminated by signal\n";
    exit 1;
}


__END__


=head1 NAME

ucs-snapshot-mit - a simple script that grabs a snapshot of the MIT and stores it in an xml file.
                   It rotates the snapshot files based on configuration settings (to limit number of snapshots retained).


=head1 USAGE

ucs-snapshot-mit [options]

    ucs-snapshot-mit --uname=admin --passwd=pass --uri=https://ucs-vip-ip/nuova --backupHome=/home/joe/ucs-backup/ --maxBackups=7

    ucs-snapshot-mit --cfg=./config/demo.conf 


=head1 REQUIRED ARGUMENTS

    --uri=<ucs-vip>           The UCS VIP uri.
    --uname=<ucs-user>        The UCS user name.
    --passwd=<ucs-pass>       The UCS password.
    --backupHome=<directory>  The directory to store the snapshot in.
    --maxBackups=<num>        The maximum number of snapshots to retain.


UCS connection arguments may be provided in a L<"CONFIGURATION FILE">

=head1 OPTIONS

    --dn=<dn>                 Identifies the UCS subtree. Defaults to "".
    --hier                    Return hierarchy of found managed objects. 
    --cfg=<config-file>       Specify a configuration file. 
    --log4perl=<cfg-file>     The log4perl config file.
    --usage                   Print a usage message.


=head1 CONFIGURATION FILE

A configuration file is used to store UCS connection information.  
The uri, uname, passwd and log4perl command line options can be read from it. 
Example configuration file:

    [UCS]
    URI     = http://ucs-vip/nuova
    UNAME = admin
    PASSWORD = Nbv12345

    [APP]
    LOG4PERL = /home/ikent/demo/cfg/log.cfg
    BACKUP_HOME = /home/ikent/backup
    MAX_BACKUP_FILES = 7

=head1 SEE ALSO

L<LOG4PERL> for log4perl configuration file.
L<UcsSimple::Session>
L<UcsSimple::CommMgr>
L<UcsSimple::XmlUtil>

=head1 AUTHOR

Ike Kent, C<< <ikent at cisco.com> >>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc ucs-backup-mit

You can also look for information at:

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Ike Kent.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut


