#!/usr/bin/perl

use strict;
use warnings;

use Carp qw(croak cluck confess); 
use Getopt::Long;
use XML::LibXML;
use UcsSimple::DomUtil;


my $gClassDnRef = {};
my $gClassCountRef = {};
my $lXmlFile = undef;

# Specify the command line options and process the command line
my $options_okay = GetOptions (
    # Application specific options
    'xml=s'              => \$lXmlFile,   # XML file.

    # Standard meta-options
    'usage'                 => sub { usage(); },
);

usage() if !$options_okay;




# Grab xml from file or stdin
my $lXmlParser = XML::LibXML->new();
my $lXmlDoc;
if (!defined($lXmlFile))
{
    my $lXml = do { local $/; <STDIN>; };
    $lXmlDoc = $lXmlParser->parse_string($lXml);
}
else
{
    $lXmlDoc = $lXmlParser->parse_file($lXmlFile);
}

UcsSimple::DomUtil::populateDn($lXmlDoc, 1);
UcsSimple::DomUtil::visit($lXmlDoc, \&countCb);

# Print out the results
my $lTotal=0;
my $lTotalDns=0;
foreach my $lClass (sort keys %{$gClassCountRef})
{
    my $lDnCount = keys %{$gClassDnRef->{$lClass}};
    my $lCount   = $gClassCountRef->{$lClass};
    print "$lClass (elements=$lCount)(dns=$lDnCount)\n";

    foreach my $lDn (keys %{$gClassDnRef->{$lClass}})
    {
        print "\t$lDn\n";
    }
    $lTotal += $lCount;
    $lTotalDns += $lDnCount;
}

print "Total elements:$lTotal\n"; 
print "Total dns :$lTotalDns\n"; 



sub countCb
{
    my $aInElement = shift;

    my $lClass = $aInElement->localname;
    $gClassCountRef->{$lClass}++;

    if ($aInElement->hasAttribute('dn'))
    {
        my $lDn = $aInElement->getAttribute('dn');
        if (!exists $gClassDnRef->{$lClass})
        {
            $gClassDnRef->{$lClass} = {};
        }
        $gClassDnRef->{$lClass}->{$lDn} = 1;
    }
}



# Print usage message.
sub usage
{
    print "For usage information:\n";
    print "\n\tperldoc count-elements\n\n";
    exit;
}



__END__


=head1 NAME

count-elements - summarize elements and dns of xml document

=head1 USAGE

count-elements [options]

    count-elements --xml=response.xml

    cat response.xml >> count-elements 

    cat response.xml | pretty-print --populateDn |  count-elements 

=head1 OPTIONS

    --xml=<filename>          The xml file name.
    --usage                   Print a usage message.


=head1 AUTHOR

Ike Kent, C<< <ikent at cisco.com> >>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc count-elements

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Ike Kent.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut



