#!/usr/bin/perl

use strict;
use warnings;

use Config::Std;
use Getopt::Long;
use Carp qw(croak cluck confess);
use Log::Log4perl qw (get_logger);

use UcsSimple::Session;
use UcsSimple::CommMgr;
use UcsSimple::Util;
use UcsSimple::XmlUtil;
use UcsSimple::EventUtil;

# A signal handler - if interupted, we can gracefully logout.
$SIG{'INT'} = \&sigIntHandler;
my $lCommMgr = undef;

my $lUname = "admin";
my $lUri = undef;
my $lPasswd = undef;
my $lPretty= undef;
my $lLogCfgFile = undef;
my $lCfgFile = undef;
my $lRetCode = 1;
my $lSleepTime=60;

# Specify the command line options and process the command line
my $options_okay = GetOptions (
        # Application specific options
	'uri=s' 	=> \$lUri,          # Server uri
        'uname=s'       => \$lUname,        # User name.
	'passwd=s'      => \$lPasswd,       # Password.
	'log4perl=s'    => \$lLogCfgFile,   # log4perl configuration file
	'cfg=s'         => \$lCfgFile,      # a cfg file with application settings.
        'sleep=s'       => \$lSleepTime,    # Loop sleep time

	'pretty'	=> \$lPretty,       # Pretty print response.

	# Standard meta-options
	'usage'		=> sub { usage(); },
);

usage() if !$options_okay;

if (defined($lCfgFile))
{
    read_config $lCfgFile => my %lConfig;

    # Command line arguments take precendence.
    # Next, we read from a configuration file.
    $lUri = $lConfig{'UCS'}{'URI'} if (!$lUri);
    $lUname = $lConfig{'UCS'}{'UNAME'} if (!$lUname);
    $lPasswd = $lConfig{'UCS'}{'PASSWORD'} if (!$lPasswd);
    $lLogCfgFile = $lConfig{'APP'}{'LOG4PERL'} if (!$lLogCfgFile);
}

usage() if ((!$lUname) || (!$lPasswd) || (!$lUri));

initLogging($lLogCfgFile);

# Create session and communication manager
my $lSession = UcsSimple::Session->new(
    {userName => $lUname, password => $lPasswd, uri => $lUri });

$lCommMgr = UcsSimple::CommMgr->new({session => $lSession});

while (1)
{
    eval {
        my $lCookie = $lCommMgr->doLogin();
        croak "Failed to get cookie" if (!defined $lCookie);

        my $lPrintCb = ($lPretty) ? \&prettyPrintCb : \&printCb;
        
        $lCommMgr->doSubscribe({eventCb => UcsSimple::EventUtil::getEventHandler($lPrintCb)});
    };
    print "Problem with event channel: " . $@ if $@;

    print "Logging out\n";
    $lCommMgr->doLogout();

    print "Sleeping for: " . $lSleepTime . " seconds\n";
    sleep($lSleepTime);
}



sub printCb
{
    my ($aInEvent) = @_;;
    print $aInEvent . "\n\n";
}



sub prettyPrintCb
{
    my ($aInEvent) = @_;;

    eval
    {
        my $parser = XML::LibXML->new();
        my $lDoc = $parser->parse_string($aInEvent);
        print $lDoc->toString(2);
        print "\n";
    };
    if ($@)
    {
        print "Error, parsing event (ignoring) " . $@;
    }
}



# Print usage message.
sub usage 
{
    print "For usage information:\n";
    print "\n\tperldoc event-reader\n\n";
    exit;
}



sub initLogging
{
    my ($aInLogCfgFile) = @_;

    if (defined($aInLogCfgFile))
    {
        Log::Log4perl::init_and_watch($aInLogCfgFile, 5);
        get_logger(__PACKAGE__)->debug(
            "Log configuration file: $aInLogCfgFile");
    }
    else
    {
        my $lConf = q(
            log4perl.category = DEBUG, Logfile
            log4perl.appender.Logfile          = Log::Log4perl::Appender::File
            log4perl.appender.Logfile.filename = debug.log
            log4perl.appender.Logfile.layout = Log::Log4perl::Layout::PatternLayout
            log4perl.appender.Logfile.layout.ConversionPattern = [%p][%d][%F:%L] %m%n
            log4perl.appender.Logfile.mode     = write
            log4perl.appender.Logfile.main     = DEBUG
        );
        Log::Log4perl::init(\$lConf);
        get_logger(__PACKAGE__)->debug(
            "No log configuration file -using reasonable defaults");
    }
}



sub sigIntHandler
{
    get_logger(__PACKAGE__)->warn(
         "Caught signal - cleaning up");

    print "Caught signal - will cleanup and exit \n";
    $lCommMgr->doLogout();

    get_logger(__PACKAGE__)->warn(
         "Terminated by signal");

    print "Terminated by signal\n";
    exit 1;
}


__END__



=head1 NAME

event-reader - a simple script that connects to ucs event channel and prints out events.


=head1 USAGE

event-reader [options]

    event-reader --uname=admin --passwd=pass --sleep=120 --uri=https://ucs-vip-ip/nuova --pretty 

    event-reader --cfg=./config/demo.conf


=head1 REQUIRED ARGUMENTS

    --uri=<ucs-vip>           The UCS VIP uri.
    --uname=<ucs-user>        The UCS user name.
    --passwd=<ucs-pass>       The UCS password.


UCS connection arguments may be provided in a L<"CONFIGURATION FILE">

=head1 OPTIONS

    --sleep=<time>            Seconds to sleep if reconnect is necessary.
    --cfg=<config-file>       Specify a configuration file. 
    --log4perl=<cfg-file>     The log4perl config file.
    --pretty                  Pretty print the UCS response.
    --usage                   Print a usage message.



=head1 CONFIGURATION FILE

A configuration file is used to store UCS connection information.  
The uri, uname, passwd and log4perl command line options can be read from it. 
Example configuration file:

    [UCS]
    URI     = http://ucs-vip/nuova
    UNAME = admin
    PASSWORD = Nbv12345

    [APP]
    LOG4PERL = ./config/log.conf


=head1 SEE ALSO

L<LOG4PERL> for log4perl configuration file.
L<UcsSimple::EventUtil>
L<UcsSimple::Session>
L<UcsSimple::CommMgr>
L<UcsSimple::Util>
L<UcsSimple::XmlUtil>


=head1 AUTHOR

Ike Kent, C<< <ikent at cisco.com> >>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc event-reader

You can also look for information at:

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Ike Kent.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut

